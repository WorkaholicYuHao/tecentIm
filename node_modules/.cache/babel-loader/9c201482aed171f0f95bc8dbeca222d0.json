{"remainingRequest":"/Users/yuhao/TIMSDK/H5/node_modules/thread-loader/dist/cjs.js!/Users/yuhao/TIMSDK/H5/node_modules/babel-loader/lib/index.js!/Users/yuhao/TIMSDK/H5/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/yuhao/TIMSDK/H5/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yuhao/TIMSDK/H5/src/components/layout/side-bar.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yuhao/TIMSDK/H5/src/components/layout/side-bar.vue","mtime":1616982605601},{"path":"/Users/yuhao/TIMSDK/H5/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yuhao/TIMSDK/H5/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yuhao/TIMSDK/H5/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/yuhao/TIMSDK/H5/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yuhao/TIMSDK/H5/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport _defineProperty from \"/Users/yuhao/TIMSDK/H5/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapGetters, mapState } from 'vuex';\nimport MyProfile from \"../my-profile\";\nimport ConversationList from \"../conversation/conversation-list\";\nimport GroupList from \"../group/group-list\";\nimport FriendList from \"../friend/friend-list\";\nimport BlackList from \"../blacklist/blacklist\";\nvar activeName = {\n  CONVERSATION_LIST: 'conversation-list',\n  GROUP_LIST: 'group-list',\n  FRIEND_LIST: 'friend-list',\n  BLACK_LIST: 'black-list',\n  GROUP_LIVE: 'group-live'\n};\nexport default {\n  name: 'SideBar',\n  components: {\n    MyProfile: MyProfile,\n    ConversationList: ConversationList,\n    GroupList: GroupList,\n    FriendList: FriendList,\n    BlackList: BlackList\n  },\n  data: function data() {\n    return {\n      active: activeName.CONVERSATION_LIST,\n      activeName: activeName\n    };\n  },\n  computed: _objectSpread(_objectSpread(_objectSpread({}, mapGetters(['totalUnreadCount'])), mapState({\n    userID: function userID(state) {\n      return state.user.userID;\n    }\n  })), {}, {\n    showConversationList: function showConversationList() {\n      return this.active === activeName.CONVERSATION_LIST;\n    },\n    showGroupList: function showGroupList() {\n      return this.active === activeName.GROUP_LIST;\n    },\n    showFriendList: function showFriendList() {\n      return this.active === activeName.FRIEND_LIST;\n    },\n    showBlackList: function showBlackList() {\n      return this.active === activeName.BLACK_LIST;\n    },\n    showAddButton: function showAddButton() {\n      return [activeName.CONVERSATION_LIST, activeName.GROUP_LIST].includes(this.active);\n    }\n  }),\n  methods: {\n    checkoutActive: function checkoutActive(name) {\n      this.active = name;\n    },\n    handleClick: function handleClick(event) {\n      switch (event.target.id) {\n        case activeName.CONVERSATION_LIST:\n          this.checkoutActive(activeName.CONVERSATION_LIST);\n          break;\n\n        case activeName.GROUP_LIST:\n          this.checkoutActive(activeName.GROUP_LIST);\n          break;\n\n        case activeName.FRIEND_LIST:\n          this.checkoutActive(activeName.FRIEND_LIST);\n          break;\n\n        case activeName.BLACK_LIST:\n          this.checkoutActive(activeName.BLACK_LIST);\n          break;\n\n        case activeName.GROUP_LIVE:\n          this.groupLive();\n          break;\n      }\n    },\n    handleRefresh: function handleRefresh() {\n      var _this = this;\n\n      switch (this.active) {\n        case activeName.CONVERSATION_LIST:\n          this.tim.getConversationList().catch(function (error) {\n            _this.$store.commit('showMessage', {\n              type: 'error',\n              message: error.message\n            });\n          });\n          break;\n\n        case activeName.GROUP_LIST:\n          this.getGroupList();\n          break;\n\n        case activeName.FRIEND_LIST:\n          this.getFriendList();\n          break;\n\n        case activeName.BLACK_LIST:\n          this.$store.dispatch('getBlacklist');\n          break;\n      }\n    },\n    getGroupList: function getGroupList() {\n      var _this2 = this;\n\n      this.tim.getGroupList().then(function (_ref) {\n        var groupList = _ref.data;\n\n        _this2.$store.dispatch('updateGroupList', groupList);\n      }).catch(function (error) {\n        _this2.$store.commit('showMessage', {\n          type: 'error',\n          message: error.message\n        });\n      });\n    },\n    getFriendList: function getFriendList() {\n      var _this3 = this;\n\n      this.tim.getFriendList().then(function (_ref2) {\n        var friendList = _ref2.data;\n\n        _this3.$store.commit('upadteFriendList', friendList);\n      }).catch(function (error) {\n        _this3.$store.commit('showMessage', {\n          type: 'error',\n          message: error.message\n        });\n      }).catch(function (error) {\n        _this3.$store.commit('showMessage', {\n          type: 'error',\n          message: error.message\n        });\n      });\n    },\n    groupLive: function groupLive() {\n      this.$store.commit('updateGroupLiveInfo', {\n        groupID: 0,\n        anchorID: this.userID\n      });\n      this.$bus.$emit('open-group-live', {\n        channel: 2\n      });\n    }\n  }\n};",null]}