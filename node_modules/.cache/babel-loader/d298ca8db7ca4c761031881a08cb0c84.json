{"remainingRequest":"/Users/yuhao/TIMSDK/H5/node_modules/babel-loader/lib/index.js!/Users/yuhao/TIMSDK/H5/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/yuhao/TIMSDK/H5/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yuhao/TIMSDK/H5/src/components/conversation/conversation-item.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yuhao/TIMSDK/H5/src/components/conversation/conversation-item.vue","mtime":1616982605596},{"path":"/Users/yuhao/TIMSDK/H5/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yuhao/TIMSDK/H5/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/yuhao/TIMSDK/H5/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yuhao/TIMSDK/H5/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _defineProperty from \"/Users/yuhao/TIMSDK/H5/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapGetters, mapState } from 'vuex';\nimport { isToday, getDate, getTime } from \"../../utils/date\";\nexport default {\n  name: 'conversation-item',\n  props: ['conversation'],\n  data: function data() {\n    return {\n      popoverVisible: false,\n      showMessageAtMe_text: ''\n    };\n  },\n  computed: _objectSpread(_objectSpread({\n    hasMessageAtMe: function hasMessageAtMe() {\n      return this.currentConversation.conversationID !== this.conversation.conversationID && this.conversation.groupAtInfoList && this.conversation.groupAtInfoList.length > 0;\n    },\n    messageAtMeText: function messageAtMeText() {\n      var _this = this;\n\n      var text = '';\n\n      if (this.conversation.groupAtInfoList.length > 0) {\n        this.conversation.groupAtInfoList.forEach(function (item) {\n          if (item.atTypeArray[0] === _this.TIM.TYPES.CONV_AT_ME) {\n            text.indexOf('[@所有人]') !== -1 ? text = '[@所有人][有人@我]' : text = '[有人@我]';\n          }\n\n          if (item.atTypeArray[0] === _this.TIM.TYPES.CONV_AT_ALL) {\n            text.indexOf('[有人@我]') !== -1 ? text = '[有人@我][@所有人]' : text = '[@所有人]';\n          }\n\n          if (item.atTypeArray[0] === _this.TIM.TYPES.CONV_AT_ALL_AT_ME) {\n            text = '[@所有人][有人@我]';\n          }\n        });\n      }\n\n      return text;\n    },\n    showUnreadCount: function showUnreadCount() {\n      if (this.$store.getters.hidden) {\n        return this.conversation.unreadCount > 0;\n      } // 是否显示未读计数。当前会话和未读计数为0的会话，不显示。\n\n\n      return this.currentConversation.conversationID !== this.conversation.conversationID && this.conversation.unreadCount > 0;\n    },\n    date: function date() {\n      if (!this.conversation.lastMessage || !this.conversation.lastMessage.lastTime) {\n        return '';\n      }\n\n      var date = new Date(this.conversation.lastMessage.lastTime * 1000);\n\n      if (isToday(date)) {\n        return getTime(date);\n      }\n\n      return getDate(date);\n    },\n    avatar: function avatar() {\n      switch (this.conversation.type) {\n        case 'GROUP':\n          return this.conversation.groupProfile.avatar;\n\n        case 'C2C':\n          return this.conversation.userProfile.avatar;\n\n        default:\n          return '';\n      }\n    },\n    conversationName: function conversationName() {\n      if (this.conversation.type === this.TIM.TYPES.CONV_C2C) {\n        return this.conversation.userProfile.nick || this.conversation.userProfile.userID;\n      }\n\n      if (this.conversation.type === this.TIM.TYPES.CONV_GROUP) {\n        return this.conversation.groupProfile.name || this.conversation.groupProfile.groupID;\n      }\n\n      if (this.conversation.type === this.TIM.TYPES.CONV_SYSTEM) {\n        return '系统通知';\n      }\n\n      return '';\n    },\n    showGrayBadge: function showGrayBadge() {\n      if (this.conversation.type !== this.TIM.TYPES.CONV_GROUP) {\n        return false;\n      }\n\n      return this.conversation.groupProfile.selfInfo.messageRemindType === 'AcceptNotNotify';\n    },\n    messageForShow: function messageForShow() {\n      if (this.conversation.lastMessage.isRevoked) {\n        if (this.conversation.lastMessage.fromAccount === this.currentUserProfile.userID) {\n          return '你撤回了一条消息';\n        }\n\n        if (this.conversation.type === this.TIM.TYPES.CONV_C2C) {\n          return '对方撤回了一条消息';\n        }\n\n        return \"\".concat(this.conversation.lastMessage.fromAccount, \"\\u64A4\\u56DE\\u4E86\\u4E00\\u6761\\u6D88\\u606F\");\n      }\n\n      return this.conversation.lastMessage.messageForShow;\n    }\n  }, mapState({\n    currentConversation: function currentConversation(state) {\n      return state.conversation.currentConversation;\n    },\n    currentUserProfile: function currentUserProfile(state) {\n      return state.user.currentUserProfile;\n    }\n  })), mapGetters(['toAccount'])),\n  mounted: function mounted() {},\n  methods: {\n    selectConversation: function selectConversation() {\n      if (this.conversation.conversationID !== this.currentConversation.conversationID) {\n        this.$store.dispatch('checkoutConversation', this.conversation.conversationID);\n      }\n    },\n    deleteConversation: function deleteConversation(event) {\n      var _this2 = this;\n\n      // 停止冒泡，避免和点击会话的事件冲突\n      event.stopPropagation();\n      this.tim.deleteConversation(this.conversation.conversationID).then(function () {\n        _this2.$store.commit('showMessage', {\n          message: \"\\u4F1A\\u8BDD\\u3010\".concat(_this2.conversationName, \"\\u3011\\u5220\\u9664\\u6210\\u529F!\"),\n          type: 'success'\n        });\n\n        _this2.popoverVisible = false;\n\n        _this2.$store.commit('resetCurrentConversation');\n      }).catch(function (error) {\n        _this2.$store.commit('showMessage', {\n          message: \"\\u4F1A\\u8BDD\\u3010\".concat(_this2.conversationName, \"\\u3011\\u5220\\u9664\\u5931\\u8D25!, error=\").concat(error.message),\n          type: 'error'\n        });\n\n        _this2.popoverVisible = false;\n      });\n    },\n    showContextMenu: function showContextMenu() {\n      this.popoverVisible = true;\n    }\n  }\n};",{"version":3,"sources":["conversation-item.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <div\n        class=\"conversation-item-container\"\n        :class=\"{ 'choose': conversation.conversationID === currentConversation.conversationID }\"\n        @click=\"selectConversation\"\n    >\n      <div class=\"close-btn\">\n        <span class=\"tim-icon-close\" title=\"删除会话\" @click=\"deleteConversation\"></span>\n      </div>\n      <div class=\"warp\">\n        <avatar :src=\"avatar\" :type=\"conversation.type\" />\n        <div class=\"content\">\n          <div class=\"row-1\">\n            <div class=\"name\">\n              <div class=\"text-ellipsis\">\n                <span :title=\"conversation.userProfile.nick || conversation.userProfile.userID\"\n                  v-if=\"conversation.type ===  TIM.TYPES.CONV_C2C\"\n                  >{{conversation.userProfile.nick || conversation.userProfile.userID}}\n                </span>\n                <span :title=\"conversation.groupProfile.name || conversation.groupProfile.groupID\"\n                  v-else-if=\"conversation.type ===  TIM.TYPES.CONV_GROUP\"\n                  >{{conversation.groupProfile.name || conversation.groupProfile.groupID}}\n                </span>\n                <span\n                  v-else-if=\"conversation.type === TIM.TYPES.CONV_SYSTEM\"\n                  >系统通知\n                </span>\n              </div>\n            </div>\n            <div class=\"unread-count\">\n              <span class=\"badge\" v-if=\"showUnreadCount\">\n                {{conversation.unreadCount > 99 ? '99+' : conversation.unreadCount}}\n              </span>\n            </div>\n          </div>\n          <div class=\"row-2\">\n            <div class=\"summary\">\n              <div v-if=\"conversation.lastMessage\" class=\"text-ellipsis\">\n                <span class=\"remind\"  v-if=\"hasMessageAtMe\">{{messageAtMeText}}</span>\n                <span class=\"text\" :title=\"conversation.lastMessage.messageForShow\">\n                  {{messageForShow}}\n                </span>\n              </div>\n            </div>\n            <div class=\"date\">\n              {{date}}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n</template>\n\n<script>\nimport { mapGetters, mapState } from 'vuex'\nimport { isToday, getDate, getTime } from '../../utils/date'\nexport default {\n  name: 'conversation-item',\n  props: ['conversation'],\n  data() {\n    return {\n      popoverVisible: false,\n      showMessageAtMe_text:''\n    }\n  },\n  computed: {\n    hasMessageAtMe() {\n      return (\n              this.currentConversation.conversationID !==\n              this.conversation.conversationID && this.conversation.groupAtInfoList && this.conversation.groupAtInfoList.length > 0\n      )\n    },\n    messageAtMeText() {\n      let text = ''\n      if (this.conversation.groupAtInfoList.length > 0) {\n        this.conversation.groupAtInfoList.forEach((item) => {\n          if (item.atTypeArray[0] === this.TIM.TYPES.CONV_AT_ME) {\n            text.indexOf('[@所有人]') !== -1 ? text = '[@所有人][有人@我]' : text = '[有人@我]'\n          }\n          if (item.atTypeArray[0] === this.TIM.TYPES.CONV_AT_ALL) {\n            text.indexOf('[有人@我]') !== -1 ? text = '[有人@我][@所有人]' : text = '[@所有人]'\n          }\n          if (item.atTypeArray[0] === this.TIM.TYPES.CONV_AT_ALL_AT_ME) {\n            text = '[@所有人][有人@我]'\n          }\n        })\n      }\n      return text\n    },\n    showUnreadCount() {\n      if (this.$store.getters.hidden) {\n        return this.conversation.unreadCount > 0\n      }\n      // 是否显示未读计数。当前会话和未读计数为0的会话，不显示。\n      return (\n        this.currentConversation.conversationID !==\n          this.conversation.conversationID && this.conversation.unreadCount > 0\n      )\n    },\n    date() {\n      if (\n        !this.conversation.lastMessage ||\n        !this.conversation.lastMessage.lastTime\n      ) {\n        return ''\n      }\n      const date = new Date(this.conversation.lastMessage.lastTime * 1000)\n      if (isToday(date)) {\n        return getTime(date)\n      }\n      return getDate(date)\n    },\n    avatar: function() {\n      switch (this.conversation.type) {\n        case 'GROUP':\n          return this.conversation.groupProfile.avatar\n        case 'C2C':\n          return this.conversation.userProfile.avatar\n        default:\n          return ''\n      }\n    },\n    conversationName: function() {\n      if (this.conversation.type === this.TIM.TYPES.CONV_C2C) {\n        return this.conversation.userProfile.nick || this.conversation.userProfile.userID\n      }\n      if (this.conversation.type === this.TIM.TYPES.CONV_GROUP) {\n        return this.conversation.groupProfile.name || this.conversation.groupProfile.groupID\n      }\n      if (this.conversation.type === this.TIM.TYPES.CONV_SYSTEM) {\n        return '系统通知'\n      }\n      return ''\n    },\n    showGrayBadge() {\n      if (this.conversation.type !== this.TIM.TYPES.CONV_GROUP) {\n        return false\n      }\n      return (\n        this.conversation.groupProfile.selfInfo.messageRemindType ===\n        'AcceptNotNotify'\n      )\n    },\n    messageForShow() {\n      if (this.conversation.lastMessage.isRevoked) {\n        if (this.conversation.lastMessage.fromAccount === this.currentUserProfile.userID) {\n          return '你撤回了一条消息'\n        }\n        if (this.conversation.type === this.TIM.TYPES.CONV_C2C) {\n          return '对方撤回了一条消息'\n        }\n        return `${this.conversation.lastMessage.fromAccount}撤回了一条消息`\n      }\n      return this.conversation.lastMessage.messageForShow\n    },\n    ...mapState({\n      currentConversation: state => state.conversation.currentConversation,\n      currentUserProfile: state => state.user.currentUserProfile\n    }),\n    ...mapGetters(['toAccount'])\n  },\n  mounted() {\n\n  },\n  methods: {\n    selectConversation() {\n      if (this.conversation.conversationID !== this.currentConversation.conversationID) {\n        this.$store.dispatch(\n          'checkoutConversation',\n          this.conversation.conversationID\n        )\n      }\n    },\n    deleteConversation(event) {\n      // 停止冒泡，避免和点击会话的事件冲突\n      event.stopPropagation()\n      this.tim\n        .deleteConversation(this.conversation.conversationID)\n        .then(() => {\n          this.$store.commit('showMessage', {\n            message: `会话【${this.conversationName}】删除成功!`,\n            type: 'success'\n          })\n          this.popoverVisible = false\n          this.$store.commit('resetCurrentConversation')\n        })\n        .catch(error => {\n          this.$store.commit('showMessage', {\n            message: `会话【${this.conversationName}】删除失败!, error=${error.message}`,\n            type: 'error'\n          })\n          this.popoverVisible = false\n        })\n    },\n    showContextMenu() {\n      this.popoverVisible = true\n    },\n  }\n}\n</script>\n\n<style lang=\"stylus\" scoped>\n\n\n.conversation-item-container\n  padding 15px 20px\n  cursor pointer\n  position relative\n  overflow hidden\n  transition .2s\n  // &:first-child\n  //   padding-top 30px\n  &:hover\n    background-color $background\n    .close-btn\n      right 3px\n  .close-btn\n    position absolute\n    right -20px\n    top 3px\n    color $font-dark\n    transition: all .2s ease;\n    &:hover\n      color $danger\n  .warp\n    display flex\n  .avatar\n    width 40px\n    height 40px\n    margin-right 10px\n    border-radius 50%\n    flex-shrink 0\n  .content\n    flex 1\n    height 40px\n    overflow hidden\n    .row-1\n      display flex\n      line-height 21px\n      .name\n        color $font-light\n        flex 1\n        min-width 0px\n      .unread-count\n        padding-left 10px\n        flex-shrink 0\n        color $font-dark\n        font-size 12px\n        .badge\n          vertical-align bottom\n          background-color $danger\n          border-radius 10px\n          color #FFF\n          display inline-block\n          font-size 12px\n          height 18px\n          max-width 40px\n          line-height 18px\n          padding 0 6px\n          text-align center\n          white-space nowrap\n    .row-2\n      display flex\n      font-size 12px\n      padding-top 3px\n      .summary\n        flex 1\n        overflow hidden\n        min-width 0px\n        color: $secondary\n        .remind\n          color $danger\n      .date\n        padding-left 10px\n        flex-shrink 0\n        text-align right\n        color $font-dark\n.choose {\n  background-color: $background;\n}\n.context-menu-button {\n  padding: 10px\n  border: 2px solid $primary;\n  border-radius: 8px;\n}\n</style>\n"],"sourceRoot":"src/components/conversation"}]}