{"remainingRequest":"/Users/yuhao/TIMSDK/H5/node_modules/thread-loader/dist/cjs.js!/Users/yuhao/TIMSDK/H5/node_modules/babel-loader/lib/index.js!/Users/yuhao/TIMSDK/H5/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/yuhao/TIMSDK/H5/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yuhao/TIMSDK/H5/src/components/group-live/components/live-pusher.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yuhao/TIMSDK/H5/src/components/group-live/components/live-pusher.vue","mtime":1616982605600},{"path":"/Users/yuhao/TIMSDK/H5/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yuhao/TIMSDK/H5/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yuhao/TIMSDK/H5/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/yuhao/TIMSDK/H5/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yuhao/TIMSDK/H5/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/yuhao/TIMSDK/H5/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"/Users/yuhao/TIMSDK/H5/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport axios from 'axios';\nimport { mapState } from 'vuex';\nimport liveHeader from \"./live-header\"; // import liveShare from './live-share'\n\nimport { formatTime } from \"../../../utils/date.js\";\nexport default {\n  name: 'livePusher',\n  data: function data() {\n    return {\n      pusher: null,\n      roomID: 0,\n      roomName: '',\n      isPushingStream: false,\n      // 是否正在推流\n      updateTimer: 0,\n      pusherTime: '00:00:00',\n      time: 0,\n      // 直播时长 秒\n      recordTimer: null,\n      // 记录直播时长\n      isMute: false,\n      //是否禁言\n      isStartCamera: true\n    };\n  },\n  computed: _objectSpread(_objectSpread({}, mapState({\n    user: function user(state) {\n      return state.user;\n    },\n    groupLiveInfo: function groupLiveInfo(state) {\n      return state.groupLive.groupLiveInfo;\n    }\n  })), {}, {\n    anchorAvatar: function anchorAvatar() {\n      return this.user.currentUserProfile.avatar || 'https://imgcache.qq.com/open/qcloud/video/act/webim-avatar/avatar-2.png';\n    }\n  }),\n  created: function created() {\n    this.$store.commit('resetGroupLiveInfo', {\n      roomID: 0\n    });\n  },\n  mounted: function mounted() {\n    this.init();\n  },\n  beforeDestroy: function () {\n    var _beforeDestroy = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!this.isPushingStream) {\n                _context.next = 5;\n                break;\n              }\n\n              clearInterval(this.updateTimer);\n              clearInterval(this.recordTimer);\n              _context.next = 5;\n              return this.stopPush();\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    function beforeDestroy() {\n      return _beforeDestroy.apply(this, arguments);\n    }\n\n    return beforeDestroy;\n  }(),\n  components: {\n    liveHeader: liveHeader // liveShare,\n\n  },\n  methods: {\n    // 初始化\n    init: function init() {\n      this.pusher = this.TWebLive.createPusher({\n        userID: this.user.userID\n      });\n      this.setRenderView();\n      this.pusher.on(this.TWebLive.EVENT.RTC_CONNECTION_STATE_CHANGED, this.onRTCConnectionStateChanged);\n      this.pusher.on(this.TWebLive.EVENT.RTC_CLIENT_BANNED, this.onRTCClientBanned);\n      this.pusher.on(this.TWebLive.EVENT.RTC_CLIENT_ERROR, this.onRTCError);\n    },\n    // eslint-disable-next-line no-unused-vars\n    onRTCConnectionStateChanged: function onRTCConnectionStateChanged(event) {},\n    // eslint-disable-next-line no-unused-vars\n    onRTCClientBanned: function onRTCClientBanned(event) {},\n    // eslint-disable-next-line no-unused-vars\n    onRTCError: function onRTCError(event) {},\n    //开启本地预览\n    setRenderView: function setRenderView() {\n      var _this = this;\n\n      this.pusher.setRenderView({\n        elementID: 'video-container',\n        audio: true,\n        video: true\n      }).then(function () {\n        // 设置背景\n        var el = window.document.getElementById('video-container').childNodes;\n        el[0].style.backgroundColor = 'rgba(0,0,0,0)';\n        _this.isStartCamera = false;\n      }).catch(function () {});\n    },\n    // 摄像头、麦克风操作\n    startCamera: function startCamera() {\n      var _this2 = this;\n\n      this.pusher.startCamera().then(function () {\n        _this2.isStartCamera = false;\n      }).catch(function () {});\n    },\n    stopCamera: function stopCamera() {\n      var _this3 = this;\n\n      this.pusher.stopCamera().then(function () {\n        _this3.isStartCamera = true;\n      }).catch(function () {});\n    },\n    startMicrophone: function startMicrophone() {\n      var _this4 = this;\n\n      this.pusher.startMicrophone().then(function () {\n        _this4.isMute = false;\n      }).catch(function () {});\n    },\n    stopMicrophone: function stopMicrophone() {\n      var _this5 = this;\n\n      this.pusher.stopMicrophone().then(function () {\n        _this5.isMute = true;\n      }).catch(function () {});\n    },\n    // 生成roomID\n    generateRoomID: function generateRoomID(min, max) {\n      return Math.floor(Math.random() * (max - min) + min).toString();\n    },\n    // 创建直播房间\n    createRoom: function () {\n      var _createRoom = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                this.roomID = this.generateRoomID(1000, 2000000000);\n                this.roomName = this.roomName ? this.roomName : \"\".concat(this.user.userID, \"\\u7684\\u76F4\\u64AD\");\n                _context2.next = 4;\n                return axios(\"https://service-62h5r0ea-1252463788.gz.apigw.tencentcs.com/release/forTestAdvanced?method=createRoom&appId=\".concat(this.user.sdkAppID, \"&type=groupLive&title=\").concat(this.roomName, \"&anchorId=\").concat(this.user.userID, \"&roomId=\").concat(this.roomID));\n\n              case 4:\n                this.$store.commit('updateGroupLiveInfo', {\n                  roomID: this.roomID,\n                  roomName: this.roomName\n                });\n                this.createGroupLiveAvChatRoom();\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function createRoom() {\n        return _createRoom.apply(this, arguments);\n      }\n\n      return createRoom;\n    }(),\n    // 解散直播间\n    destroyRoom: function () {\n      var _destroyRoom = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return axios(\"https://service-c2zjvuxa-1252463788.gz.apigw.tencentcs.com/release/forTest?method=destroyRoom&appId=\".concat(this.user.sdkAppID, \"&type=groupLive&roomId=\").concat(this.roomID));\n\n              case 2:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function destroyRoom() {\n        return _destroyRoom.apply(this, arguments);\n      }\n\n      return destroyRoom;\n    }(),\n    // 更新直播间 10s 上报一次，心跳保活，如果不上报，后台检测不到心跳会销毁房间\n    updateRoom: function updateRoom() {\n      axios(\"https://service-c2zjvuxa-1252463788.gz.apigw.tencentcs.com/release/forTest?method=updateRoom&appId=\".concat(this.user.sdkAppID, \"&type=groupLive&roomId=\").concat(this.roomID));\n    },\n    // 创建直播互动群\n    createGroupLiveAvChatRoom: function () {\n      var _createGroupLiveAvChatRoom = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return this.tim.createGroup({\n                  name: this.roomName,\n                  groupID: this.roomID,\n                  type: this.TIM.TYPES.GRP_AVCHATROOM\n                });\n\n              case 2:\n                this.$bus.$emit('join-group-live-avchatroom');\n\n              case 3:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function createGroupLiveAvChatRoom() {\n        return _createGroupLiveAvChatRoom.apply(this, arguments);\n      }\n\n      return createGroupLiveAvChatRoom;\n    }(),\n    //开始推流\n    startPushStream: function () {\n      var _startPushStream = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {\n        var _this6 = this;\n\n        var streamID, url;\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return this.createRoom();\n\n              case 2:\n                //streamID 拼接规则： sdkappid_roomid_userid_main\n                streamID = \"\".concat(this.user.sdkAppID, \"_\").concat(this.roomID, \"_\").concat(this.user.userID, \"_main\"); // 对userSig进行encode,防止userSig中带有+时被浏览器解析为空格，导致trtc ws连接失败\n\n                url = \"room://livedomainname=tuikit.qcloud.com&sdkappid=\".concat(this.user.sdkAppID, \"&roomid=\").concat(this.roomID, \"&userid=\").concat(this.user.userID, \"&usersig=\").concat(encodeURIComponent(this.user.userSig), \"&streamid=\").concat(streamID);\n                this.pusher.startPush(url).then(function () {\n                  _this6.isPushingStream = true;\n\n                  _this6.sendNoticeToGroup(1);\n\n                  _this6.updateTimer = setInterval(function () {\n                    _this6.updateRoom();\n                  }, 10000);\n                  _this6.recordTimer = setInterval(function () {\n                    _this6.recordLiveTime();\n                  }, 1000);\n                }).catch(function () {});\n\n              case 5:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function startPushStream() {\n        return _startPushStream.apply(this, arguments);\n      }\n\n      return startPushStream;\n    }(),\n    // 停止推流\n    stopPushStream: function stopPushStream() {\n      // 派发关闭浮层组件事件\n      this.$bus.$emit('close-group-live');\n    },\n    stopPush: function () {\n      var _stopPush = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {\n        return regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return this.destroyRoom();\n\n              case 2:\n                _context6.next = 4;\n                return this.pusher.stopPush();\n\n              case 4:\n                _context6.next = 6;\n                return this.tim.dismissGroup(this.roomID);\n\n              case 6:\n                // 解散直播群组\n                this.isPushingStream = false;\n                this.sendNoticeToGroup(0);\n\n              case 8:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function stopPush() {\n        return _stopPush.apply(this, arguments);\n      }\n\n      return stopPush;\n    }(),\n    // 给群内发送开始直播、结束直播自定义消息\n    // roomStatus 1 开始直播 0 结束直播\n    sendNoticeToGroup: function sendNoticeToGroup(roomStatus) {\n      if (!this.groupLiveInfo.groupID) {\n        return;\n      }\n\n      var _this$user$currentUse = this.user.currentUserProfile,\n          userID = _this$user$currentUse.userID,\n          nick = _this$user$currentUse.nick,\n          avatar = _this$user$currentUse.avatar;\n      var form = {\n        roomId: this.roomID,\n        roomName: this.roomName,\n        roomCover: avatar,\n        roomStatus: \"\".concat(roomStatus),\n        anchorName: nick,\n        version: 4,\n        roomType: 'liveRoom',\n        anchorId: userID,\n        businessID: 'group_live'\n      };\n      var message = this.tim.createCustomMessage({\n        to: this.groupLiveInfo.groupID,\n        conversationType: this.TIM.TYPES.CONV_GROUP,\n        priority: this.TIM.TYPES.MSG_PRIORITY_NORMAL,\n        payload: {\n          data: JSON.stringify(form),\n          description: '',\n          extension: ''\n        }\n      });\n      this.$store.commit('pushCurrentMessageList', message);\n      this.tim.sendMessage(message).then(function () {}).catch(function () {});\n    },\n    // 记录直播时间\n    recordLiveTime: function recordLiveTime() {\n      this.time++;\n      this.pusherTime = formatTime(this.time);\n    }\n  }\n};",null]}