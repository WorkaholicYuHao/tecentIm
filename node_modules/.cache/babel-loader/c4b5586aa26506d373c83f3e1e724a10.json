{"remainingRequest":"/Users/yuhao/TIMSDK/H5/node_modules/babel-loader/lib/index.js!/Users/yuhao/TIMSDK/H5/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/yuhao/TIMSDK/H5/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yuhao/TIMSDK/H5/src/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yuhao/TIMSDK/H5/src/index.vue","mtime":1617096399640},{"path":"/Users/yuhao/TIMSDK/H5/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yuhao/TIMSDK/H5/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/yuhao/TIMSDK/H5/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yuhao/TIMSDK/H5/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _Notification2 from \"element-ui/lib/theme-chalk/notification.css\";\nimport \"element-ui/lib/theme-chalk/base.css\";\nimport _Notification from \"element-ui/lib/notification\";\nimport \"core-js/modules/es6.function.name\";\nimport _defineProperty from \"/Users/yuhao/TIMSDK/H5/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapState } from 'vuex';\nimport CurrentConversation from \"./components/conversation/current-conversation\";\nimport SideBar from \"./components/layout/side-bar\";\nimport Login from \"./components/user/login\";\nimport ImagePreviewer from \"./components/message/image-previewer.vue\";\nimport QrCodeList from \"./components/qr-code-list\";\nimport { translateGroupSystemNotice } from \"./utils/common\";\nimport GroupLive from \"./components/group-live/index\";\nimport Calling from \"./components/message/trtc-calling/calling-index\";\nimport { ACTION } from \"./utils/trtcCustomMessageMap\";\nimport MTA from \"./utils/mta\";\nexport default {\n  title: 'TIMSDK DEMO',\n  data: function data() {\n    return {\n      loginType: 2,\n      // github 登录只使用默认账号登录,\n      ifSuccess: false\n    };\n  },\n  components: {\n    Login: Login,\n    SideBar: SideBar,\n    CurrentConversation: CurrentConversation,\n    ImagePreviewer: ImagePreviewer,\n    QrCodeList: QrCodeList,\n    GroupLive: GroupLive,\n    Calling: Calling\n  },\n  computed: _objectSpread(_objectSpread({}, mapState({\n    currentUserProfile: function currentUserProfile(state) {\n      return state.user.currentUserProfile;\n    },\n    currentConversation: function currentConversation(state) {\n      return state.conversation.currentConversation;\n    },\n    videoCall: function videoCall(state) {\n      return state.conversation.videoCall;\n    },\n    audioCall: function audioCall(state) {\n      return state.conversation.audioCall;\n    },\n    isLogin: function isLogin(state) {\n      return state.user.isLogin;\n    },\n    isSDKReady: function isSDKReady(state) {\n      return state.user.isSDKReady;\n    },\n    isBusy: function isBusy(state) {\n      return state.video.isBusy;\n    },\n    userID: function userID(state) {\n      return state.user.userID;\n    },\n    userSig: function userSig(state) {\n      return state.user.userSig;\n    },\n    sdkAppID: function sdkAppID(state) {\n      return state.user.sdkAppID;\n    }\n  })), {}, {\n    // 是否显示 Loading 状态\n    showLoading: function showLoading() {\n      return !this.isSDKReady;\n    }\n  }),\n  mounted: function mounted() {\n    // 初始化监听器\n    this.initListener();\n  },\n  watch: {\n    isLogin: function isLogin(next) {\n      if (next) {\n        MTA.clickStat('link_two', {\n          show: 'true'\n        });\n      }\n    }\n  },\n  methods: {\n    initListener: function initListener() {\n      // 登录成功后会触发 SDK_READY 事件，该事件触发后，可正常使用 SDK 接口\n      this.tim.on(this.TIM.EVENT.SDK_READY, this.onReadyStateUpdate, this); // SDK NOT READT\n\n      this.tim.on(this.TIM.EVENT.SDK_NOT_READY, this.onReadyStateUpdate, this); // 被踢出\n\n      this.tim.on(this.TIM.EVENT.KICKED_OUT, this.onKickOut); // SDK内部出错\n\n      this.tim.on(this.TIM.EVENT.ERROR, this.onError); // 收到新消息\n\n      this.tim.on(this.TIM.EVENT.MESSAGE_RECEIVED, this.onReceiveMessage); // 会话列表更新\n\n      this.tim.on(this.TIM.EVENT.CONVERSATION_LIST_UPDATED, this.onUpdateConversationList); // 群组列表更新\n\n      this.tim.on(this.TIM.EVENT.GROUP_LIST_UPDATED, this.onUpdateGroupList); // 网络监测\n\n      this.tim.on(this.TIM.EVENT.NET_STATE_CHANGE, this.onNetStateChange); // 已读回执\n\n      this.tim.on(this.TIM.EVENT.MESSAGE_READ_BY_PEER, this.onMessageReadByPeer);\n    },\n    onReceiveMessage: function onReceiveMessage(_ref) {\n      var messageList = _ref.data;\n      this.handleVideoMessage(messageList);\n      this.handleQuitGroupTip(messageList);\n      this.handleCloseGroupLive(messageList);\n      this.$store.commit('pushCurrentMessageList', messageList);\n      this.$store.commit('pushAvChatRoomMessageList', messageList);\n    },\n    onError: function onError(_ref2) {\n      var data = _ref2.data;\n\n      if (data.message !== 'Network Error') {\n        this.$store.commit('showMessage', {\n          message: data.message,\n          type: 'error'\n        });\n      }\n    },\n    onMessageReadByPeer: function onMessageReadByPeer() {},\n    onReadyStateUpdate: function onReadyStateUpdate(_ref3) {\n      var _this = this;\n\n      var name = _ref3.name;\n      var isSDKReady = name === this.TIM.EVENT.SDK_READY ? true : false;\n      this.$store.commit('toggleIsSDKReady', isSDKReady);\n\n      if (isSDKReady) {\n        this.tim.getMyProfile().then(function (_ref4) {\n          var data = _ref4.data;\n\n          _this.$store.commit('updateCurrentUserProfile', data);\n        }).catch(function (error) {\n          _this.$store.commit('showMessage', {\n            type: 'error',\n            message: error.message\n          });\n        });\n        this.$store.dispatch('getBlacklist'); // 登录trtc calling\n\n        this.trtcCalling.login({\n          sdkAppID: this.sdkAppID,\n          userID: this.userID,\n          userSig: this.userSig\n        });\n      }\n    },\n    kickedOutReason: function kickedOutReason(type) {\n      switch (type) {\n        case this.TIM.TYPES.KICKED_OUT_MULT_ACCOUNT:\n          return '由于多实例登录';\n\n        case this.TIM.TYPES.KICKED_OUT_MULT_DEVICE:\n          return '由于多设备登录';\n\n        case this.TIM.TYPES.KICKED_OUT_USERSIG_EXPIRED:\n          return '由于 userSig 过期';\n\n        default:\n          return '';\n      }\n    },\n    checkoutNetState: function checkoutNetState(state) {\n      switch (state) {\n        case this.TIM.TYPES.NET_STATE_CONNECTED:\n          return {\n            message: '已接入网络',\n            type: 'success'\n          };\n\n        case this.TIM.TYPES.NET_STATE_CONNECTING:\n          return {\n            message: '当前网络不稳定',\n            type: 'warning'\n          };\n\n        case this.TIM.TYPES.NET_STATE_DISCONNECTED:\n          return {\n            message: '当前网络不可用',\n            type: 'error'\n          };\n\n        default:\n          return '';\n      }\n    },\n    onNetStateChange: function onNetStateChange(event) {\n      this.$store.commit('showMessage', this.checkoutNetState(event.data.state));\n    },\n    onKickOut: function onKickOut(event) {\n      this.$store.commit('showMessage', {\n        message: \"\".concat(this.kickedOutReason(event.data.type), \"\\u88AB\\u8E22\\u51FA\\uFF0C\\u8BF7\\u91CD\\u65B0\\u767B\\u5F55\\u3002\"),\n        type: 'error'\n      });\n      this.$store.commit('toggleIsLogin', false);\n      this.$store.commit('reset');\n    },\n    onUpdateConversationList: function onUpdateConversationList(event) {\n      this.$store.commit('updateConversationList', event.data);\n    },\n    onUpdateGroupList: function onUpdateGroupList(event) {\n      this.$store.commit('updateGroupList', event.data);\n    },\n    onReceiveGroupSystemNotice: function onReceiveGroupSystemNotice(event) {\n      var _this2 = this;\n\n      var isKickedout = event.data.type === 4;\n      var isCurrentConversation = \"GROUP\".concat(event.data.message.payload.groupProfile.groupID) === this.currentConversation.conversationID; // 在当前会话被踢，需reset当前会话\n\n      if (isKickedout && isCurrentConversation) {\n        this.$store.commit('resetCurrentConversation');\n      }\n\n      _Notification({\n        title: '新系统通知',\n        message: translateGroupSystemNotice(event.data.message),\n        duration: 3000,\n        onClick: function onClick() {\n          var SystemConversationID = '@TIM#SYSTEM';\n\n          _this2.$store.dispatch('checkoutConversation', SystemConversationID);\n        }\n      });\n    },\n    selectConversation: function selectConversation(conversationID) {\n      if (conversationID !== this.currentConversation.conversationID) {\n        this.$store.dispatch('checkoutConversation', conversationID);\n      }\n    },\n    isJsonStr: function isJsonStr(str) {\n      try {\n        JSON.parse(str);\n        return true;\n      } catch (_unused) {\n        return false;\n      }\n    },\n    handleVideoMessage: function handleVideoMessage(messageList) {\n      var _this3 = this;\n\n      var videoMessageList = messageList.filter(function (message) {\n        return message.type === _this3.TIM.TYPES.MSG_CUSTOM && _this3.isJsonStr(message.payload.data);\n      });\n      if (videoMessageList.length === 0) return;\n      var videoPayload = JSON.parse(videoMessageList[0].payload.data);\n\n      if (videoPayload.action === ACTION.VIDEO_CALL_ACTION_DIALING) {\n        if (this.isBusy) {\n          this.$bus.$emit('busy', videoPayload, videoMessageList[0]);\n          return;\n        }\n\n        this.$store.commit('GENERATE_VIDEO_ROOM', videoPayload.room_id);\n        this.selectConversation(videoMessageList[0].conversationID); // 切换当前会话页\n\n        if (videoMessageList[0].from !== this.userID) {\n          this.$bus.$emit('isCalled');\n        }\n      }\n\n      if (videoPayload.action === ACTION.VIDEO_CALL_ACTION_SPONSOR_CANCEL) {\n        this.$bus.$emit('missCall');\n      }\n\n      if (videoPayload.action === ACTION.VIDEO_CALL_ACTION_REJECT) {\n        this.$bus.$emit('isRefused');\n      }\n\n      if (videoPayload.action === ACTION.VIDEO_CALL_ACTION_SPONSOR_TIMEOUT) {\n        this.$bus.$emit('missCall');\n      }\n\n      if (videoPayload.action === ACTION.VIDEO_CALL_ACTION_ACCEPTED) {\n        this.$bus.$emit('isAccept');\n      }\n\n      if (videoPayload.action === ACTION.VIDEO_CALL_ACTION_HANGUP) {\n        this.$bus.$emit('isHungUp');\n      }\n\n      if (videoPayload.action === ACTION.VIDEO_CALL_ACTION_LINE_BUSY) {\n        this.$bus.$emit('isRefused');\n      }\n\n      if (videoPayload.action === ACTION.VIDEO_CALL_ACTION_ERROR) {\n        this.$bus.$emit('isRefused');\n      }\n    },\n\n    /**\n     * 使用 window.Notification 进行全局的系统通知\n     * @param {Message} message\n     */\n    notifyMe: function notifyMe(message) {\n      var _this4 = this;\n\n      // 需检测浏览器支持和用户授权\n      if (!('Notification' in window)) {\n        return;\n      } else if (window.Notification.permission === 'granted') {\n        this.handleNotify(message);\n      } else if (window.Notification.permission !== 'denied') {\n        window.Notification.requestPermission().then(function (permission) {\n          // 如果用户同意，就可以向他们发送通知\n          if (permission === 'granted') {\n            _this4.handleNotify(message);\n          }\n        });\n      }\n    },\n    handleNotify: function handleNotify(message) {\n      var _this5 = this;\n\n      var notification = new window.Notification('有人提到了你', {\n        icon: 'https://webim-1252463788.file.myqcloud.com/demo/img/logo.dc3be0d4.png',\n        body: message.payload.text\n      });\n\n      notification.onclick = function () {\n        window.focus();\n\n        _this5.$store.dispatch('checkoutConversation', message.conversationID);\n\n        notification.close();\n      };\n    },\n    handleLinkClick: function handleLinkClick() {\n      MTA.clickStat('link_two', {\n        click: 'true'\n      });\n    },\n\n    /**\n     * 收到有群成员退群/被踢出的groupTip时，需要将相关群成员从当前会话的群成员列表中移除\n     * @param {Message[]} messageList\n     */\n    handleQuitGroupTip: function handleQuitGroupTip(messageList) {\n      var _this6 = this;\n\n      // 筛选出当前会话的退群/被踢群的 groupTip\n      var groupTips = messageList.filter(function (message) {\n        return _this6.currentConversation.conversationID === message.conversationID && message.type === _this6.TIM.TYPES.MSG_GRP_TIP && (message.payload.operationType === _this6.TIM.TYPES.GRP_TIP_MBR_QUIT || message.payload.operationType === _this6.TIM.TYPES.GRP_TIP_MBR_KICKED_OUT);\n      }); // 清理当前会话的群成员列表\n\n      if (groupTips.length > 0) {\n        groupTips.forEach(function (groupTip) {\n          if (Array.isArray(groupTip.payload.userIDList) || groupTip.payload.userIDList.length > 0) {\n            _this6.$store.commit('deleteGroupMemberList', groupTip.payload.userIDList);\n          }\n        });\n      }\n    },\n\n    /**\n     * 收到结束直播自定义消息，派发事件关闭组件\n     * @param {Message[]} messageList\n     */\n    handleCloseGroupLive: function handleCloseGroupLive(messageList) {\n      var _this7 = this;\n\n      messageList.forEach(function (message) {\n        if (_this7.currentConversation.conversationID === message.conversationID && message.type === _this7.TIM.TYPES.MSG_CUSTOM) {\n          var data = {};\n\n          try {\n            data = JSON.parse(message.payload.data);\n          } catch (e) {\n            data = {};\n          }\n\n          if (data.roomId && Number(data.roomStatus) === 0) {\n            _this7.$bus.$emit('close-group-live');\n          }\n        }\n      });\n    }\n  }\n};",{"version":3,"sources":["index.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"container\">\n    <div id=\"wrapper\" v-if=\"!isLogin\" >\n\t  <iframe style=\"width: 100%;height: 700px;\" src=\"https://trtc-1252463788.cos.ap-guangzhou.myqcloud.com/web/demo/env-detect/index.html \" v-if=\"!ifSuccess\"></iframe>\n\t  <div v-else>      \n\t\t<login />\n\t\t<qr-code-list/>\n\t  </div>\n    </div>\n    <div\n      class=\"loading\"\n      v-else\n      v-loading=\"showLoading\"\n      element-loading-text=\"正在拼命初始化...\"\n      element-loading-background=\"rgba(0, 0, 0, 0.8)\"\n    >\n      <div class=\"chat-wrapper\">\n        <el-row>\n          <el-col :xs=\"10\" :sm=\"10\" :md=\"8\" :lg=\"8\" :xl=\"7\">\n            <side-bar />\n          </el-col>\n          <el-col :xs=\"14\" :sm=\"14\" :md=\"16\" :lg=\"16\" :xl=\"17\">\n            <current-conversation />\n          </el-col>\n        </el-row>\n        <a\n          class=\"official-link\"\n          href=\"https://cloud.tencent.com/product/im\"\n          target=\"_blank\"\n          @click=\"handleLinkClick\"\n        >登录 即时通信IM 官网，了解更多体验方式</a>\n      </div>\n      <calling  ref=\"callLayer\" class=\"chat-wrapper\"/>\n      <image-previewer />\n      <group-live />\n    </div>\n    <div class=\"bg\"></div>\n  </div>\n</template>\n\n<script>\nimport { Notification } from 'element-ui'\nimport { mapState } from 'vuex'\nimport CurrentConversation from './components/conversation/current-conversation'\nimport SideBar from './components/layout/side-bar'\nimport Login from './components/user/login'\nimport ImagePreviewer from './components/message/image-previewer.vue'\nimport QrCodeList from './components/qr-code-list'\nimport { translateGroupSystemNotice } from './utils/common'\nimport GroupLive from './components/group-live/index'\nimport Calling from './components/message/trtc-calling/calling-index'\nimport { ACTION } from './utils/trtcCustomMessageMap'\nimport MTA from './utils/mta'\n\nexport default {\n  title: 'TIMSDK DEMO',\n  data () {\n    return {\n      loginType: 2 ,// github 登录只使用默认账号登录,\n\t  ifSuccess: false\n    }\n  },\n  components: {\n    Login,\n    SideBar,\n    CurrentConversation,\n    ImagePreviewer,\n    QrCodeList,\n    GroupLive,\n    Calling,\n  },\n\n  computed: {\n    ...mapState({\n      currentUserProfile: state => state.user.currentUserProfile,\n      currentConversation: state => state.conversation.currentConversation,\n      videoCall: state => state.conversation.videoCall,\n      audioCall: state => state.conversation.audioCall,\n      isLogin: state => state.user.isLogin,\n      isSDKReady: state => state.user.isSDKReady,\n      isBusy: state => state.video.isBusy,\n      userID: state => state.user.userID,\n      userSig: state => state.user.userSig,\n      sdkAppID: state => state.user.sdkAppID\n    }),\n    // 是否显示 Loading 状态\n    showLoading() {\n      return !this.isSDKReady\n    }\n  },\n  mounted() {\n    // 初始化监听器\n    this.initListener()\n\n  },\n\n  watch: {\n    isLogin(next) {\n      if (next) {\n        MTA.clickStat('link_two', { show: 'true' })\n      }\n    },\n  },\n\n  methods: {\n    initListener() {\n      // 登录成功后会触发 SDK_READY 事件，该事件触发后，可正常使用 SDK 接口\n      this.tim.on(this.TIM.EVENT.SDK_READY, this.onReadyStateUpdate, this)\n      // SDK NOT READT\n      this.tim.on(this.TIM.EVENT.SDK_NOT_READY, this.onReadyStateUpdate, this)\n      // 被踢出\n      this.tim.on(this.TIM.EVENT.KICKED_OUT, this.onKickOut)\n      // SDK内部出错\n      this.tim.on(this.TIM.EVENT.ERROR, this.onError)\n      // 收到新消息\n      this.tim.on(this.TIM.EVENT.MESSAGE_RECEIVED, this.onReceiveMessage)\n      // 会话列表更新\n      this.tim.on(this.TIM.EVENT.CONVERSATION_LIST_UPDATED, this.onUpdateConversationList)\n      // 群组列表更新\n      this.tim.on(this.TIM.EVENT.GROUP_LIST_UPDATED, this.onUpdateGroupList)\n      // 网络监测\n      this.tim.on(this.TIM.EVENT.NET_STATE_CHANGE, this.onNetStateChange)\n      // 已读回执\n      this.tim.on(this.TIM.EVENT.MESSAGE_READ_BY_PEER, this.onMessageReadByPeer)\n\n    },\n\n    onReceiveMessage({ data: messageList }) {\n      this.handleVideoMessage(messageList)\n      this.handleQuitGroupTip(messageList)\n      this.handleCloseGroupLive(messageList)\n      this.$store.commit('pushCurrentMessageList', messageList)\n      this.$store.commit('pushAvChatRoomMessageList', messageList)\n    },\n\n    onError({ data }) {\n      if (data.message !== 'Network Error') {\n        this.$store.commit('showMessage', {\n          message: data.message,\n          type: 'error'\n        })\n      }\n    },\n    onMessageReadByPeer() {\n\n    },\n    onReadyStateUpdate({ name }) {\n      const isSDKReady = name === this.TIM.EVENT.SDK_READY ? true : false\n      this.$store.commit('toggleIsSDKReady', isSDKReady)\n\n      if (isSDKReady) {\n        this.tim\n          .getMyProfile()\n          .then(({ data }) => {\n            this.$store.commit('updateCurrentUserProfile', data)\n          })\n          .catch(error => {\n            this.$store.commit('showMessage', {\n              type: 'error',\n              message: error.message\n            })\n          })\n        this.$store.dispatch('getBlacklist')\n        // 登录trtc calling\n        this.trtcCalling.login({\n          sdkAppID: this.sdkAppID,\n          userID: this.userID,\n          userSig:this.userSig\n        })\n      }\n    },\n    kickedOutReason(type) {\n      switch (type) {\n        case this.TIM.TYPES.KICKED_OUT_MULT_ACCOUNT:\n          return '由于多实例登录'\n        case this.TIM.TYPES.KICKED_OUT_MULT_DEVICE:\n          return '由于多设备登录'\n        case this.TIM.TYPES.KICKED_OUT_USERSIG_EXPIRED:\n          return '由于 userSig 过期'\n        default:\n          return ''\n      }\n    },\n    checkoutNetState(state) {\n      switch (state) {\n        case this.TIM.TYPES.NET_STATE_CONNECTED:\n          return { message: '已接入网络', type: 'success' }\n        case this.TIM.TYPES.NET_STATE_CONNECTING:\n          return { message: '当前网络不稳定', type: 'warning' }\n        case this.TIM.TYPES.NET_STATE_DISCONNECTED:\n          return { message: '当前网络不可用', type: 'error' }\n        default:\n          return ''\n      }\n    },\n    onNetStateChange(event) {\n      this.$store.commit('showMessage', this.checkoutNetState(event.data.state))\n    },\n    onKickOut(event) {\n      this.$store.commit('showMessage', {\n        message: `${this.kickedOutReason(event.data.type)}被踢出，请重新登录。`,\n        type: 'error'\n      })\n      this.$store.commit('toggleIsLogin', false)\n      this.$store.commit('reset')\n    },\n    onUpdateConversationList(event) {\n      this.$store.commit('updateConversationList', event.data)\n    },\n    onUpdateGroupList(event) {\n      this.$store.commit('updateGroupList', event.data)\n    },\n    onReceiveGroupSystemNotice(event) {\n      const isKickedout = event.data.type === 4\n      const isCurrentConversation =\n        `GROUP${event.data.message.payload.groupProfile.groupID}` ===\n        this.currentConversation.conversationID\n      // 在当前会话被踢，需reset当前会话\n      if (isKickedout && isCurrentConversation) {\n        this.$store.commit('resetCurrentConversation')\n      }\n      Notification({\n        title: '新系统通知',\n        message: translateGroupSystemNotice(event.data.message),\n        duration: 3000,\n        onClick: () => {\n          const SystemConversationID = '@TIM#SYSTEM'\n          this.$store.dispatch('checkoutConversation', SystemConversationID)\n        }\n      })\n    },\n\n    selectConversation(conversationID) {\n      if (conversationID !== this.currentConversation.conversationID) {\n        this.$store.dispatch('checkoutConversation',conversationID)\n      }\n    },\n    isJsonStr(str) {\n      try{\n        JSON.parse(str)\n        return true\n      }catch {\n        return false\n      }\n    },\n    handleVideoMessage(messageList) {\n      const videoMessageList = messageList.filter(\n        message => message.type === this.TIM.TYPES.MSG_CUSTOM && this.isJsonStr(message.payload.data)\n      )\n      if (videoMessageList.length === 0) return\n      const videoPayload = JSON.parse(videoMessageList[0].payload.data)\n      if (videoPayload.action === ACTION.VIDEO_CALL_ACTION_DIALING) {\n        if (this.isBusy) {\n          this.$bus.$emit('busy', videoPayload, videoMessageList[0])\n          return\n        }\n        this.$store.commit('GENERATE_VIDEO_ROOM', videoPayload.room_id)\n        this.selectConversation(videoMessageList[0].conversationID) // 切换当前会话页\n        if (videoMessageList[0].from !== this.userID) {\n          this.$bus.$emit('isCalled')\n        }\n      }\n      if (videoPayload.action === ACTION.VIDEO_CALL_ACTION_SPONSOR_CANCEL) {\n        this.$bus.$emit('missCall')\n      }\n      if (videoPayload.action === ACTION.VIDEO_CALL_ACTION_REJECT) {\n        this.$bus.$emit('isRefused')\n      }\n      if (videoPayload.action === ACTION.VIDEO_CALL_ACTION_SPONSOR_TIMEOUT) {\n        this.$bus.$emit('missCall')\n      }\n      if (videoPayload.action === ACTION.VIDEO_CALL_ACTION_ACCEPTED) {\n        this.$bus.$emit('isAccept')\n      }\n      if (videoPayload.action === ACTION.VIDEO_CALL_ACTION_HANGUP) {\n        this.$bus.$emit('isHungUp')\n      }\n      if (videoPayload.action === ACTION.VIDEO_CALL_ACTION_LINE_BUSY) {\n        this.$bus.$emit('isRefused')\n      }\n      if (videoPayload.action === ACTION.VIDEO_CALL_ACTION_ERROR) {\n        this.$bus.$emit('isRefused')\n      }\n    },\n    /**\n     * 使用 window.Notification 进行全局的系统通知\n     * @param {Message} message\n     */\n    notifyMe(message) {\n      // 需检测浏览器支持和用户授权\n      if (!('Notification' in window)) {\n        return\n      } else if (window.Notification.permission === 'granted') {\n        this.handleNotify(message)\n      } else if (window.Notification.permission !== 'denied') {\n        window.Notification.requestPermission().then(permission => {\n          // 如果用户同意，就可以向他们发送通知\n          if (permission === 'granted') {\n            this.handleNotify(message)\n          }\n        })\n      }\n    },\n    handleNotify(message) {\n      const notification = new window.Notification('有人提到了你', {\n        icon: 'https://webim-1252463788.file.myqcloud.com/demo/img/logo.dc3be0d4.png',\n        body: message.payload.text\n      })\n      notification.onclick = () => {\n        window.focus()\n        this.$store.dispatch('checkoutConversation', message.conversationID)\n        notification.close()\n      }\n    },\n    handleLinkClick() {\n      MTA.clickStat('link_two', { click: 'true' })\n    },\n    /**\n     * 收到有群成员退群/被踢出的groupTip时，需要将相关群成员从当前会话的群成员列表中移除\n     * @param {Message[]} messageList\n     */\n    handleQuitGroupTip(messageList) {\n      // 筛选出当前会话的退群/被踢群的 groupTip\n      const groupTips = messageList.filter(message => {\n        return this.currentConversation.conversationID === message.conversationID &&\n          message.type === this.TIM.TYPES.MSG_GRP_TIP &&\n          (message.payload.operationType === this.TIM.TYPES.GRP_TIP_MBR_QUIT ||\n          message.payload.operationType === this.TIM.TYPES.GRP_TIP_MBR_KICKED_OUT)\n      })\n      // 清理当前会话的群成员列表\n      if (groupTips.length > 0) {\n        groupTips.forEach(groupTip => {\n          if (Array.isArray(groupTip.payload.userIDList) || groupTip.payload.userIDList.length > 0) {\n            this.$store.commit('deleteGroupMemberList', groupTip.payload.userIDList)\n          }\n        })\n      }\n    },\n    /**\n     * 收到结束直播自定义消息，派发事件关闭组件\n     * @param {Message[]} messageList\n     */\n    handleCloseGroupLive(messageList) {\n      messageList.forEach(message => {\n        if (this.currentConversation.conversationID === message.conversationID && message.type === this.TIM.TYPES.MSG_CUSTOM) {\n          let data = {}\n          try {\n            data = JSON.parse(message.payload.data)\n          } catch(e) {\n            data = {}\n          }\n          if (data.roomId && Number(data.roomStatus) === 0) {\n            this.$bus.$emit('close-group-live')\n          }\n        }\n      })\n    },\n  }\n}\n</script>\n\n<style lang=\"stylus\">\nbody {\n  overflow: hidden;\n  margin: 0;\n  font-family: 'Microsoft YaHei', '微软雅黑', 'MicrosoftJhengHei', 'Lantinghei SC', 'Open Sans', Arial, 'Hiragino Sans GB', 'STHeiti', 'WenQuanYi Micro Hei', SimSun, sans-serif;\n  // font-family  \"Helvetica Neue\", Helvetica, Arial, \"PingFang SC\", \"Hiragino Sans GB\", \"Heiti SC\", \"Microsoft YaHei\", \"WenQuanYi Micro Hei\", sans-serif\n  // text-shadow: $regular 0 0 0.05em\n  background-color: $bg;\n  -ms-scroll-chaining: chained;\n  -ms-overflow-style: none;\n  -ms-content-zooming: zoom;\n  -ms-scroll-rails: none;\n  -ms-content-zoom-limit-min: 100%;\n  -ms-content-zoom-limit-max: 500%;\n  -ms-scroll-snap-type: proximity;\n  -ms-scroll-snap-points-x: snapList(100%, 200%, 300%, 400%, 500%);\n  -ms-overflow-style: none;\n  overflow: auto;\n\n  div {\n    box-sizing: border-box;\n\n    &::before, &::after {\n      box-sizing: border-box;\n    }\n  }\n}\n\n#wrapper {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n  padding-top: 60px;\n}\n\n.container\n  position relative\n  height 100vh\n.container\n  position relative\n  height 100vh\n// TODO filter mac chrome 会有问题，下次修改可以去掉\n.bg {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  top: 0;\n  left: 0;\n  z-index: -1;\n  background: url('~@/./assets/image/bg.jpg') no-repeat 0 0;\n  background-size: cover;\n  // filter blur(67px)\n}\n\n.loading {\n  height: 100vh;\n  width: 100vw;\n  display: flex;\n  justify-content: center;\n}\n\n.text-ellipsis {\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n\n.chat-wrapper {\n  margin-top: 8vh;\n  width: $width;\n  height: $height;\n  max-width: 1280px;\n  box-shadow: 0 11px 20px 0 rgba(0, 0, 0, 0.3);\n\n  .official-link {\n    display: flex;\n    text-decoration: none;\n    color: #38c9ff;\n    width: fit-content;\n    float: right;\n    height: 45px;\n    align-items: center;\n  }\n}\n\n/* 设置滚动条的样式 */\n::-webkit-scrollbar {\n  width: 3px;\n  height: 3px;\n}\n\n/* 滚动槽 */\n::-webkit-scrollbar-track {\n  border-radius: 10px;\n}\n\n/* 滚动条滑块 */\n::-webkit-scrollbar-thumb {\n  border-radius: 10px;\n  background: rgba(0, 0, 0, 0.1);\n}\n</style>\n"],"sourceRoot":"src"}]}