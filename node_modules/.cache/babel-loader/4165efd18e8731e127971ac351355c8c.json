{"remainingRequest":"/Users/yuhao/TIMSDK/H5/node_modules/thread-loader/dist/cjs.js!/Users/yuhao/TIMSDK/H5/node_modules/babel-loader/lib/index.js!/Users/yuhao/TIMSDK/H5/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/yuhao/TIMSDK/H5/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yuhao/TIMSDK/H5/src/components/message/message-bubble.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yuhao/TIMSDK/H5/src/components/message/message-bubble.vue","mtime":1616982605602},{"path":"/Users/yuhao/TIMSDK/H5/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yuhao/TIMSDK/H5/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yuhao/TIMSDK/H5/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/yuhao/TIMSDK/H5/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yuhao/TIMSDK/H5/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  name: 'MessageBubble',\n  data: function data() {\n    return {\n      isTimeout: false\n    };\n  },\n  props: {\n    isMine: {\n      type: Boolean\n    },\n    isNew: {\n      type: Boolean\n    },\n    message: {\n      type: Object,\n      required: true\n    }\n  },\n  created: function created() {\n    this.isTimeoutHandler();\n  },\n  mounted: function mounted() {\n    if (this.$refs.dropdown && this.$refs.dropdown.$el) {\n      this.$refs.dropdown.$el.addEventListener('mousedown', this.handleDropDownMousedown);\n    }\n  },\n  beforeDestroy: function beforeDestroy() {\n    if (this.$refs.dropdown && this.$refs.dropdown.$el) {\n      this.$refs.dropdown.$el.removeEventListener('mousedown', this.handleDropDownMousedown);\n    }\n  },\n  computed: {\n    bubbleStyle: function bubbleStyle() {\n      var classString = '';\n\n      if (this.isMine) {\n        classString += 'message-send';\n      } else {\n        classString += 'message-received';\n      }\n\n      if (this.isNew) {\n        classString += 'new';\n      }\n\n      return classString;\n    },\n    text: function text() {\n      if (this.message.conversationType === this.TIM.TYPES.CONV_C2C && !this.isMine) {\n        return '对方撤回了一条消息';\n      }\n\n      if (this.message.conversationType === this.TIM.TYPES.CONV_GROUP && !this.isMine) {\n        return \"\".concat(this.message.from, \"\\u64A4\\u56DE\\u4E86\\u4E00\\u6761\\u6D88\\u606F\");\n      }\n\n      return '你撤回了一条消息';\n    },\n    messageReadByPeer: function messageReadByPeer() {\n      if (this.message.status !== 'success') {\n        return false;\n      }\n\n      if (this.message.conversationType === this.TIM.TYPES.CONV_C2C && this.message.isPeerRead) {\n        return '已读';\n      }\n\n      if (this.message.conversationType === this.TIM.TYPES.CONV_C2C && !this.message.isPeerRead) {\n        return '未读';\n      }\n\n      return '';\n    },\n    isEdit: function isEdit() {\n      if (!this.isMine) {\n        return false;\n      }\n\n      if (this.message.type !== this.TIM.TYPES.MSG_TEXT) {\n        return false;\n      }\n\n      if (this.isTimeout) {\n        return false;\n      }\n\n      return true;\n    }\n  },\n  methods: {\n    handleDropDownMousedown: function handleDropDownMousedown(e) {\n      if (!this.isMine || this.isTimeout) {\n        return;\n      }\n\n      if (e.buttons === 2) {\n        if (this.$refs.dropdown.visible) {\n          this.$refs.dropdown.hide();\n        } else {\n          this.$refs.dropdown.show();\n        }\n      }\n    },\n    handleCommand: function handleCommand(command) {\n      var _this = this;\n\n      switch (command) {\n        case 'revoke':\n          this.tim.revokeMessage(this.message).then(function () {\n            _this.isTimeoutHandler();\n          }).catch(function (err) {\n            _this.$store.commit('showMessage', {\n              message: err,\n              type: 'warning'\n            });\n          });\n          break;\n\n        case 'delete':\n          break;\n\n        default:\n          break;\n      }\n    },\n    isTimeoutHandler: function isTimeoutHandler() {\n      // 从发送消息时间开始算起，两分钟内可以编辑\n      var now = new Date();\n\n      if (parseInt(now.getTime() / 1000) - this.message.time > 2 * 60) {\n        this.isTimeout = true;\n        return;\n      }\n\n      setTimeout(this.isTimeoutHandler, 1000);\n    },\n    reEdit: function reEdit() {\n      this.$bus.$emit('reEditMessage', this.message.payload.text);\n    }\n  }\n};",null]}