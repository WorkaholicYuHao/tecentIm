{"remainingRequest":"/Users/yuhao/TIMSDK/H5/node_modules/thread-loader/dist/cjs.js!/Users/yuhao/TIMSDK/H5/node_modules/babel-loader/lib/index.js!/Users/yuhao/TIMSDK/H5/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/yuhao/TIMSDK/H5/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yuhao/TIMSDK/H5/src/components/conversation/current-conversation.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yuhao/TIMSDK/H5/src/components/conversation/current-conversation.vue","mtime":1616982605598},{"path":"/Users/yuhao/TIMSDK/H5/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yuhao/TIMSDK/H5/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yuhao/TIMSDK/H5/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/yuhao/TIMSDK/H5/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yuhao/TIMSDK/H5/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.function.name\";\nimport _defineProperty from \"/Users/yuhao/TIMSDK/H5/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapGetters, mapState } from 'vuex';\nimport MessageSendBox from \"../message/message-send-box\";\nimport MessageItem from \"../message/message-item\";\nimport ConversationProfile from \"./conversation-profile.vue\";\nimport MemberProfileCard from \"../group/member-profile-card\";\nexport default {\n  name: 'CurrentConversation',\n  components: {\n    MessageSendBox: MessageSendBox,\n    MessageItem: MessageItem,\n    ConversationProfile: ConversationProfile,\n    MemberProfileCard: MemberProfileCard\n  },\n  data: function data() {\n    return {\n      isShowScrollButtomTips: false,\n      preScrollHeight: 0,\n      showConversationProfile: false,\n      timeout: ''\n    };\n  },\n  computed: _objectSpread(_objectSpread(_objectSpread({}, mapState({\n    currentConversation: function currentConversation(state) {\n      return state.conversation.currentConversation;\n    },\n    currentUnreadCount: function currentUnreadCount(state) {\n      return state.conversation.currentConversation.unreadCount;\n    },\n    currentMessageList: function currentMessageList(state) {\n      return state.conversation.currentMessageList;\n    },\n    isCompleted: function isCompleted(state) {\n      return state.conversation.isCompleted;\n    }\n  })), mapGetters(['toAccount', 'hidden'])), {}, {\n    // 是否显示当前会话组件\n    showCurrentConversation: function showCurrentConversation() {\n      return !!this.currentConversation.conversationID;\n    },\n    name: function name() {\n      if (this.currentConversation.type === 'C2C') {\n        var name = this.currentConversation.userProfile.nick || this.toAccount;\n        var list = this.currentMessageList;\n        var len = list.length;\n\n        for (var i = len - 1; i >= 0; i--) {\n          // C2C 会话对端更新nick时需要更新会话title\n          if (list[i].flow === 'in' && list[i].nick && name !== list[i].nick) {\n            name = list[i].nick;\n            break;\n          }\n        }\n\n        return name;\n      } else if (this.currentConversation.type === 'GROUP') {\n        return this.currentConversation.groupProfile.name || this.toAccount;\n      } else if (this.currentConversation.conversationID === '@TIM#SYSTEM') {\n        return '系统通知';\n      }\n\n      return this.toAccount;\n    },\n    showMessageSendBox: function showMessageSendBox() {\n      return this.currentConversation.type !== this.TIM.TYPES.CONV_SYSTEM;\n    }\n  }),\n  mounted: function mounted() {\n    this.$bus.$on('image-loaded', this.onImageLoaded);\n    this.$bus.$on('scroll-bottom', this.scrollMessageListToButtom);\n\n    if (this.currentConversation.conversationID === '@TIM#SYSTEM') {\n      return false;\n    }\n  },\n  updated: function updated() {\n    this.keepMessageListOnButtom(); // 1. 系统会话隐藏右侧资料组件\n    // 2. 没有当前会话时，隐藏右侧资料组件。\n    //    背景：退出群组/删除会话时，会出现一处空白区域\n\n    if (this.currentConversation.conversationID === '@TIM#SYSTEM' || typeof this.currentConversation.conversationID === 'undefined') {\n      this.showConversationProfile = false;\n    }\n  },\n  watch: {\n    currentUnreadCount: function currentUnreadCount(next) {\n      if (!this.hidden && next > 0) {\n        this.tim.setMessageRead({\n          conversationID: this.currentConversation.conversationID\n        });\n      }\n    },\n    hidden: function hidden(next) {\n      if (!next && this.currentUnreadCount > 0) {\n        this.tim.setMessageRead({\n          conversationID: this.currentConversation.conversationID\n        });\n      }\n    }\n  },\n  methods: {\n    onScroll: function onScroll(_ref) {\n      var scrollTop = _ref.target.scrollTop;\n      var messageListNode = this.$refs['message-list'];\n\n      if (!messageListNode) {\n        return;\n      }\n\n      if (this.preScrollHeight - messageListNode.clientHeight - scrollTop < 20) {\n        this.isShowScrollButtomTips = false;\n      }\n    },\n    // 如果滚到底部就保持在底部，否则提示是否要滚到底部\n    keepMessageListOnButtom: function keepMessageListOnButtom() {\n      var messageListNode = this.$refs['message-list'];\n\n      if (!messageListNode) {\n        return;\n      } // 距离底部20px内强制滚到底部,否则提示有新消息\n\n\n      if (this.preScrollHeight - messageListNode.clientHeight - messageListNode.scrollTop < 20) {\n        this.$nextTick(function () {\n          messageListNode.scrollTop = messageListNode.scrollHeight;\n        });\n        this.isShowScrollButtomTips = false;\n      } else {\n        this.isShowScrollButtomTips = true;\n      }\n\n      this.preScrollHeight = messageListNode.scrollHeight;\n    },\n    // 直接滚到底部\n    scrollMessageListToButtom: function scrollMessageListToButtom() {\n      var _this = this;\n\n      this.$nextTick(function () {\n        var messageListNode = _this.$refs['message-list'];\n\n        if (!messageListNode) {\n          return;\n        }\n\n        messageListNode.scrollTop = messageListNode.scrollHeight;\n        _this.preScrollHeight = messageListNode.scrollHeight;\n        _this.isShowScrollButtomTips = false;\n      });\n    },\n    showMore: function showMore() {\n      this.showConversationProfile = !this.showConversationProfile;\n    },\n    onImageLoaded: function onImageLoaded() {\n      this.keepMessageListOnButtom();\n    }\n  }\n};",null]}