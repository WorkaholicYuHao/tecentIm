{"remainingRequest":"/Users/yuhao/TIMSDK/H5/node_modules/thread-loader/dist/cjs.js!/Users/yuhao/TIMSDK/H5/node_modules/babel-loader/lib/index.js!/Users/yuhao/TIMSDK/H5/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/yuhao/TIMSDK/H5/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yuhao/TIMSDK/H5/src/components/conversation/conversationProfile/group-member-info.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yuhao/TIMSDK/H5/src/components/conversation/conversationProfile/group-member-info.vue","mtime":1616982605597},{"path":"/Users/yuhao/TIMSDK/H5/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yuhao/TIMSDK/H5/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yuhao/TIMSDK/H5/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/yuhao/TIMSDK/H5/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yuhao/TIMSDK/H5/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport _defineProperty from \"/Users/yuhao/TIMSDK/H5/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _Popover2 from \"element-ui/lib/theme-chalk/popover.css\";\nimport \"element-ui/lib/theme-chalk/base.css\";\nimport _Popover from \"element-ui/lib/popover\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapState } from 'vuex';\nimport { getFullDate } from \"../../../utils/date\";\nexport default {\n  components: {\n    ElPopover: _Popover\n  },\n  props: ['member'],\n  data: function data() {\n    return {\n      muteTime: '',\n      popoverVisible: false,\n      nameCardPopoverVisible: false,\n      nameCard: this.member.nameCard\n    };\n  },\n  computed: _objectSpread(_objectSpread({}, mapState({\n    currentConversation: function currentConversation(state) {\n      return state.conversation.currentConversation;\n    },\n    currentUserProfile: function currentUserProfile(state) {\n      return state.user.currentUserProfile;\n    },\n    current: function current(state) {\n      return state.current;\n    }\n  })), {}, {\n    // 是否显示踢出群成员按钮\n    showKickout: function showKickout() {\n      return (this.isOwner || this.isAdmin) && !this.isMine;\n    },\n    isOwner: function isOwner() {\n      return this.currentConversation.groupProfile.selfInfo.role === 'Owner';\n    },\n    isAdmin: function isAdmin() {\n      return this.currentConversation.groupProfile.selfInfo.role === 'Admin';\n    },\n    isMine: function isMine() {\n      return this.currentUserProfile.userID === this.member.userID;\n    },\n    canChangeRole: function canChangeRole() {\n      return this.isOwner && ['ChatRoom', 'Public'].includes(this.currentConversation.subType);\n    },\n    changeRoleTitle: function changeRoleTitle() {\n      if (!this.canChangeRole) {\n        return '';\n      }\n\n      return this.isOwner && this.member.role === 'Admin' ? '设为：Member' : '设为：Admin';\n    },\n    // 是否显示禁言时间\n    showMuteUntil: function showMuteUntil() {\n      // 禁言时间小于当前时间\n      return this.member.muteUntil * 1000 > this.current;\n    },\n    // 是否显示取消禁言按钮\n    showCancelBan: function showCancelBan() {\n      if (this.showMuteUntil && this.currentConversation.type === this.TIM.TYPES.CONV_GROUP && !this.isMine) {\n        return this.isOwner || this.isAdmin;\n      }\n\n      return false;\n    },\n    // 是否显示禁言按钮\n    showBan: function showBan() {\n      if (this.currentConversation.type === this.TIM.TYPES.CONV_GROUP) {\n        return this.isOwner || this.isAdmin;\n      }\n\n      return false;\n    },\n    // 是否显示编辑群名片按钮\n    showEditNameCard: function showEditNameCard() {\n      return this.isOwner || this.isAdmin;\n    },\n    // 日期格式化后的禁言时间\n    muteUntil: function muteUntil() {\n      return getFullDate(new Date(this.member.muteUntil * 1000));\n    }\n  }),\n  methods: {\n    kickoutGroupMember: function kickoutGroupMember() {\n      var _this = this;\n\n      this.tim.deleteGroupMember({\n        groupID: this.currentConversation.groupProfile.groupID,\n        reason: '我要踢你出群',\n        userIDList: [this.member.userID]\n      }).then(function () {\n        _this.$store.commit('deleteGroupMemeber', _this.member.userID);\n      }).catch(function (error) {\n        _this.$store.commit('showMessage', {\n          type: 'error',\n          message: error.message\n        });\n      });\n    },\n    changeMemberRole: function changeMemberRole() {\n      var _this2 = this;\n\n      if (!this.canChangeRole) {\n        return;\n      }\n\n      var currentRole = this.member.role;\n      this.tim.setGroupMemberRole({\n        groupID: this.currentConversation.groupProfile.groupID,\n        userID: this.member.userID,\n        role: currentRole === 'Admin' ? 'Member' : 'Admin'\n      }).catch(function (error) {\n        _this2.$store.commit('showMessage', {\n          type: 'error',\n          message: error.message\n        });\n      });\n    },\n    setGroupMemberMuteTime: function setGroupMemberMuteTime() {\n      var _this3 = this;\n\n      this.tim.setGroupMemberMuteTime({\n        groupID: this.currentConversation.groupProfile.groupID,\n        userID: this.member.userID,\n        muteTime: Number(this.muteTime)\n      }).then(function () {\n        _this3.muteTime = '';\n        _this3.popoverVisible = false;\n      }).catch(function (error) {\n        _this3.$store.commit('showMessage', {\n          type: 'error',\n          message: error.message\n        });\n      });\n    },\n    // 取消禁言\n    cancelMute: function cancelMute() {\n      var _this4 = this;\n\n      this.tim.setGroupMemberMuteTime({\n        groupID: this.currentConversation.groupProfile.groupID,\n        userID: this.member.userID,\n        muteTime: 0\n      }).then(function () {\n        _this4.muteTime = '';\n      }).catch(function (error) {\n        _this4.$store.commit('showMessage', {\n          type: 'error',\n          message: error.message\n        });\n      });\n    },\n    setGroupMemberNameCard: function setGroupMemberNameCard() {\n      var _this5 = this;\n\n      if (this.nameCard.trim().length === 0) {\n        this.$store.commit('showMessage', {\n          message: '不能设置空的群名片',\n          type: 'warning'\n        });\n        return;\n      }\n\n      this.tim.setGroupMemberNameCard({\n        groupID: this.currentConversation.groupProfile.groupID,\n        userID: this.member.userID,\n        nameCard: this.nameCard\n      }).then(function () {\n        _this5.nameCardPopoverVisible = false;\n\n        _this5.$store.commit('showMessage', {\n          message: '修改成功'\n        });\n      }).catch(function (error) {\n        _this5.$store.commit('showMessage', {\n          type: 'error',\n          message: error.message\n        });\n      });\n    }\n  }\n};",null]}