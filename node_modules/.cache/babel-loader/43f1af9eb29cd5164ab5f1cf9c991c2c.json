{"remainingRequest":"/Users/yuhao/TIMSDK/H5/node_modules/babel-loader/lib/index.js!/Users/yuhao/TIMSDK/H5/node_modules/eslint-loader/index.js??ref--13-0!/Users/yuhao/TIMSDK/H5/src/store/modules/conversation.js","dependencies":[{"path":"/Users/yuhao/TIMSDK/H5/src/store/modules/conversation.js","mtime":1616982605607},{"path":"/Users/yuhao/TIMSDK/H5/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yuhao/TIMSDK/H5/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/yuhao/TIMSDK/H5/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.find-index\";\nimport _toConsumableArray from \"/Users/yuhao/TIMSDK/H5/node_modules/@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport tim from 'tim';\nimport TIM from 'tim-js-sdk';\nimport store from '..';\nimport { titleNotify } from \"../../utils\";\nimport { filterCallingMessage } from \"../../utils/common\";\nvar conversationModules = {\n  state: {\n    currentConversation: {},\n    currentMessageList: [],\n    nextReqMessageID: '',\n    isCompleted: false,\n    // 当前会话消息列表是否已经拉完了所有消息\n    conversationList: [],\n    callingInfo: {\n      memberList: [],\n      type: 'C2C' //C2C，GROUP\n\n    },\n    audioCall: false\n  },\n  getters: {\n    toAccount: function toAccount(state) {\n      if (!state.currentConversation || !state.currentConversation.conversationID) {\n        return '';\n      }\n\n      switch (state.currentConversation.type) {\n        case 'C2C':\n          return state.currentConversation.conversationID.replace('C2C', '');\n\n        case 'GROUP':\n          return state.currentConversation.conversationID.replace('GROUP', '');\n\n        default:\n          return state.currentConversation.conversationID;\n      }\n    },\n    currentConversationType: function currentConversationType(state) {\n      if (!state.currentConversation || !state.currentConversation.type) {\n        return '';\n      }\n\n      return state.currentConversation.type;\n    },\n    totalUnreadCount: function totalUnreadCount(state) {\n      var result = state.conversationList.reduce(function (count, conversation) {\n        // 当前会话不计算总未读\n        if (!store.getters.hidden && state.currentConversation.conversationID === conversation.conversationID) {\n          return count;\n        }\n\n        return count + conversation.unreadCount;\n      }, 0);\n      titleNotify(result);\n      return result;\n    },\n    // 用于当前会话的图片预览\n    imgUrlList: function imgUrlList(state) {\n      return state.currentMessageList.filter(function (message) {\n        return message.type === TIM.TYPES.MSG_IMAGE && !message.isRevoked;\n      }) // 筛选出没有撤回并且类型是图片类型的消息\n      .map(function (message) {\n        return message.payload.imageInfoArray[0].url;\n      });\n    }\n  },\n  mutations: {\n    /**\n     * 显示trtcCalling 群通话成员列表\n     * @param {Object} state\n     * @param {Conversation} setCallingList\n     */\n    setCallingList: function setCallingList(state, value) {\n      state.callingInfo.memberList = value.memberList;\n      state.callingInfo.type = value.type;\n    },\n\n    /**\n     * 显示trtcCalling 语音通话\n     * @param {Object} state\n     * @param {Conversation} showAudioCall\n     */\n    showAudioCall: function showAudioCall(state, value) {\n      state.audioCall = value;\n    },\n\n    /**\n     * 更新当前会话\n     * 调用时机: 切换会话时\n     * @param {Object} state\n     * @param {Conversation} conversation\n     */\n    updateCurrentConversation: function updateCurrentConversation(state, conversation) {\n      state.currentConversation = conversation;\n      state.currentMessageList = [];\n      state.nextReqMessageID = '';\n      state.isCompleted = false;\n    },\n\n    /**\n     * 更新会话列表\n     * 调用时机：触发会话列表更新事件时。CONVERSATION_LIST_UPDATED\n     * @param {Object} state\n     * @param {Conversation[]} conversationList\n     */\n    updateConversationList: function updateConversationList(state, conversationList) {\n      state.conversationList = conversationList;\n    },\n\n    /**\n     * 重置当前会话\n     * 调用时机：需要重置当前会话时，例如：当前会话是一个群组，正好被踢出群时（被踢群事件触发），重置当前会话\n     * @param {Object} state\n     */\n    resetCurrentConversation: function resetCurrentConversation(state) {\n      state.currentConversation = {};\n    },\n\n    /**\n     * 将消息插入当前会话列表\n     * 调用时机：收/发消息事件触发时\n     * @param {Object} state\n     * @param {Message[]|Message} data\n     * @returns\n     */\n    pushCurrentMessageList: function pushCurrentMessageList(state, data) {\n      // 还没当前会话，则跳过\n      if (!state.currentConversation.conversationID) {\n        return;\n      }\n\n      if (Array.isArray(data)) {\n        // 筛选出当前会话的消息\n        var result = data.filter(function (item) {\n          return item.conversationID === state.currentConversation.conversationID;\n        });\n        state.currentMessageList = [].concat(_toConsumableArray(state.currentMessageList), _toConsumableArray(result));\n        filterCallingMessage(state.currentMessageList);\n      } else if (data.conversationID === state.currentConversation.conversationID) {\n        state.currentMessageList = [].concat(_toConsumableArray(state.currentMessageList), [data]);\n        filterCallingMessage(state.currentMessageList);\n      }\n    },\n\n    /**\n     * 从当前消息列表中删除某条消息\n     * @param {Object} state\n     * @param {Message} message\n     */\n    removeMessage: function removeMessage(state, message) {\n      var index = state.currentMessageList.findIndex(function (_ref) {\n        var ID = _ref.ID;\n        return ID === message.ID;\n      });\n\n      if (index >= 0) {\n        state.currentMessageList.splice(index, 1);\n      }\n    },\n    reset: function reset(state) {\n      Object.assign(state, {\n        currentConversation: {},\n        currentMessageList: [],\n        nextReqMessageID: '',\n        isCompleted: false,\n        // 当前会话消息列表是否已经拉完了所有消息\n        conversationList: []\n      });\n    }\n  },\n  actions: {\n    /**\n     * 获取消息列表\n     * 调用时机：打开某一会话时或下拉获取历史消息时\n     * @param {Object} context\n     * @param {String} conversationID\n     */\n    getMessageList: function getMessageList(context, conversationID) {\n      if (context.state.isCompleted) {\n        context.commit('showMessage', {\n          message: '已经没有更多的历史消息了哦',\n          type: 'info'\n        });\n        return;\n      }\n\n      var _context$state = context.state,\n          nextReqMessageID = _context$state.nextReqMessageID,\n          currentMessageList = _context$state.currentMessageList;\n      tim.getMessageList({\n        conversationID: conversationID,\n        nextReqMessageID: nextReqMessageID,\n        count: 15\n      }).then(function (imReponse) {\n        // 更新messageID，续拉时要用到\n        context.state.nextReqMessageID = imReponse.data.nextReqMessageID;\n        context.state.isCompleted = imReponse.data.isCompleted; // 更新当前消息列表，从头部插入\n\n        context.state.currentMessageList = [].concat(_toConsumableArray(imReponse.data.messageList), _toConsumableArray(currentMessageList));\n        filterCallingMessage(context.state.currentMessageList);\n      });\n    },\n\n    /**\n     * 切换会话\n     * 调用时机：切换会话时\n     * @param {Object} context\n     * @param {String} conversationID\n     */\n    checkoutConversation: function checkoutConversation(context, conversationID) {\n      context.commit('resetCurrentMemberList'); // 1.切换会话前，将切换前的会话进行已读上报\n\n      if (context.state.currentConversation.conversationID) {\n        var prevConversationID = context.state.currentConversation.conversationID;\n        tim.setMessageRead({\n          conversationID: prevConversationID\n        });\n      } // 2.待切换的会话也进行已读上报\n\n\n      tim.setMessageRead({\n        conversationID: conversationID\n      }); // 3. 获取会话信息\n\n      return tim.getConversationProfile(conversationID).then(function (_ref2) {\n        var data = _ref2.data;\n        // 3.1 更新当前会话\n        context.commit('updateCurrentConversation', data.conversation); // 3.2 获取消息列表\n\n        context.dispatch('getMessageList', conversationID); // 3.3 拉取第一页群成员列表\n\n        if (data.conversation.type === TIM.TYPES.CONV_GROUP) {\n          return context.dispatch('getGroupMemberList', data.conversation.groupProfile.groupID);\n        }\n\n        return Promise.resolve();\n      });\n    }\n  }\n};\nexport default conversationModules;",{"version":3,"sources":["/Users/yuhao/TIMSDK/H5/src/store/modules/conversation.js"],"names":["tim","TIM","store","titleNotify","filterCallingMessage","conversationModules","state","currentConversation","currentMessageList","nextReqMessageID","isCompleted","conversationList","callingInfo","memberList","type","audioCall","getters","toAccount","conversationID","replace","currentConversationType","totalUnreadCount","result","reduce","count","conversation","hidden","unreadCount","imgUrlList","filter","message","TYPES","MSG_IMAGE","isRevoked","map","payload","imageInfoArray","url","mutations","setCallingList","value","showAudioCall","updateCurrentConversation","updateConversationList","resetCurrentConversation","pushCurrentMessageList","data","Array","isArray","item","removeMessage","index","findIndex","ID","splice","reset","Object","assign","actions","getMessageList","context","commit","then","imReponse","messageList","checkoutConversation","prevConversationID","setMessageRead","getConversationProfile","dispatch","CONV_GROUP","groupProfile","groupID","Promise","resolve"],"mappings":";;;AAAA,OAAOA,GAAP,MAAgB,KAAhB;AACA,OAAOC,GAAP,MAAgB,YAAhB;AACA,OAAOC,KAAP,MAAkB,IAAlB;AACA,SAASC,WAAT;AACA,SAASC,oBAAT;AACA,IAAMC,mBAAmB,GAAG;AAC1BC,EAAAA,KAAK,EAAE;AACLC,IAAAA,mBAAmB,EAAE,EADhB;AAELC,IAAAA,kBAAkB,EAAE,EAFf;AAGLC,IAAAA,gBAAgB,EAAE,EAHb;AAILC,IAAAA,WAAW,EAAE,KAJR;AAIe;AACpBC,IAAAA,gBAAgB,EAAE,EALb;AAMLC,IAAAA,WAAW,EAAE;AACXC,MAAAA,UAAU,EAAE,EADD;AAEXC,MAAAA,IAAI,EAAE,KAFK,CAEI;;AAFJ,KANR;AAULC,IAAAA,SAAS,EAAE;AAVN,GADmB;AAa1BC,EAAAA,OAAO,EAAE;AACPC,IAAAA,SAAS,EAAE,mBAAAX,KAAK,EAAI;AAClB,UAAI,CAACA,KAAK,CAACC,mBAAP,IAA8B,CAACD,KAAK,CAACC,mBAAN,CAA0BW,cAA7D,EAA6E;AAC3E,eAAO,EAAP;AACD;;AACD,cAAQZ,KAAK,CAACC,mBAAN,CAA0BO,IAAlC;AACE,aAAK,KAAL;AACE,iBAAOR,KAAK,CAACC,mBAAN,CAA0BW,cAA1B,CAAyCC,OAAzC,CAAiD,KAAjD,EAAwD,EAAxD,CAAP;;AACF,aAAK,OAAL;AACE,iBAAOb,KAAK,CAACC,mBAAN,CAA0BW,cAA1B,CAAyCC,OAAzC,CAAiD,OAAjD,EAA0D,EAA1D,CAAP;;AACF;AACE,iBAAOb,KAAK,CAACC,mBAAN,CAA0BW,cAAjC;AANJ;AAQD,KAbM;AAcPE,IAAAA,uBAAuB,EAAE,iCAAAd,KAAK,EAAI;AAChC,UAAI,CAACA,KAAK,CAACC,mBAAP,IAA8B,CAACD,KAAK,CAACC,mBAAN,CAA0BO,IAA7D,EAAmE;AACjE,eAAO,EAAP;AACD;;AACD,aAAOR,KAAK,CAACC,mBAAN,CAA0BO,IAAjC;AACD,KAnBM;AAoBPO,IAAAA,gBAAgB,EAAE,0BAAAf,KAAK,EAAI;AACzB,UAAMgB,MAAM,GAAGhB,KAAK,CAACK,gBAAN,CAAuBY,MAAvB,CAA8B,UAACC,KAAD,EAAQC,YAAR,EAAyB;AACpE;AACA,YAAI,CAACvB,KAAK,CAACc,OAAN,CAAcU,MAAf,IAAyBpB,KAAK,CAACC,mBAAN,CAA0BW,cAA1B,KAA6CO,YAAY,CAACP,cAAvF,EAAuG;AACrG,iBAAOM,KAAP;AACD;;AACD,eAAOA,KAAK,GAAGC,YAAY,CAACE,WAA5B;AACD,OANc,EAMZ,CANY,CAAf;AAOAxB,MAAAA,WAAW,CAACmB,MAAD,CAAX;AACA,aAAOA,MAAP;AACD,KA9BM;AA+BP;AACAM,IAAAA,UAAU,EAAE,oBAAAtB,KAAK,EAAI;AACnB,aAAOA,KAAK,CAACE,kBAAN,CACJqB,MADI,CACG,UAAAC,OAAO;AAAA,eAAIA,OAAO,CAAChB,IAAR,KAAiBb,GAAG,CAAC8B,KAAJ,CAAUC,SAA3B,IAAwC,CAACF,OAAO,CAACG,SAArD;AAAA,OADV,EAC0E;AAD1E,OAEJC,GAFI,CAEA,UAAAJ,OAAO;AAAA,eAAIA,OAAO,CAACK,OAAR,CAAgBC,cAAhB,CAA+B,CAA/B,EAAkCC,GAAtC;AAAA,OAFP,CAAP;AAGD;AApCM,GAbiB;AAmD1BC,EAAAA,SAAS,EAAE;AACT;AACJ;AACA;AACA;AACA;AAEIC,IAAAA,cAPS,0BAOMjC,KAPN,EAOakC,KAPb,EAOoB;AAC3BlC,MAAAA,KAAK,CAACM,WAAN,CAAkBC,UAAlB,GAA+B2B,KAAK,CAAC3B,UAArC;AACAP,MAAAA,KAAK,CAACM,WAAN,CAAkBE,IAAlB,GAAyB0B,KAAK,CAAC1B,IAA/B;AACD,KAVQ;;AAYT;AACJ;AACA;AACA;AACA;AAEI2B,IAAAA,aAlBS,yBAkBKnC,KAlBL,EAkBYkC,KAlBZ,EAkBmB;AAC1BlC,MAAAA,KAAK,CAACS,SAAN,GAAkByB,KAAlB;AACD,KApBQ;;AAsBT;AACJ;AACA;AACA;AACA;AACA;AACIE,IAAAA,yBA5BS,qCA4BiBpC,KA5BjB,EA4BwBmB,YA5BxB,EA4BsC;AAC7CnB,MAAAA,KAAK,CAACC,mBAAN,GAA4BkB,YAA5B;AACAnB,MAAAA,KAAK,CAACE,kBAAN,GAA2B,EAA3B;AACAF,MAAAA,KAAK,CAACG,gBAAN,GAAyB,EAAzB;AACAH,MAAAA,KAAK,CAACI,WAAN,GAAoB,KAApB;AACD,KAjCQ;;AAkCT;AACJ;AACA;AACA;AACA;AACA;AACIiC,IAAAA,sBAxCS,kCAwCcrC,KAxCd,EAwCqBK,gBAxCrB,EAwCuC;AAC9CL,MAAAA,KAAK,CAACK,gBAAN,GAAyBA,gBAAzB;AACD,KA1CQ;;AA2CT;AACJ;AACA;AACA;AACA;AACIiC,IAAAA,wBAhDS,oCAgDgBtC,KAhDhB,EAgDuB;AAC9BA,MAAAA,KAAK,CAACC,mBAAN,GAA4B,EAA5B;AACD,KAlDQ;;AAmDT;AACJ;AACA;AACA;AACA;AACA;AACA;AACIsC,IAAAA,sBA1DS,kCA0DcvC,KA1Dd,EA0DqBwC,IA1DrB,EA0D2B;AAClC;AACA,UAAI,CAACxC,KAAK,CAACC,mBAAN,CAA0BW,cAA/B,EAA+C;AAC7C;AACD;;AACD,UAAI6B,KAAK,CAACC,OAAN,CAAcF,IAAd,CAAJ,EAAyB;AACvB;AACA,YAAMxB,MAAM,GAAGwB,IAAI,CAACjB,MAAL,CAAY,UAAAoB,IAAI;AAAA,iBAAIA,IAAI,CAAC/B,cAAL,KAAwBZ,KAAK,CAACC,mBAAN,CAA0BW,cAAtD;AAAA,SAAhB,CAAf;AACAZ,QAAAA,KAAK,CAACE,kBAAN,gCAA+BF,KAAK,CAACE,kBAArC,sBAA4Dc,MAA5D;AACAlB,QAAAA,oBAAoB,CAACE,KAAK,CAACE,kBAAP,CAApB;AACD,OALD,MAKO,IAAIsC,IAAI,CAAC5B,cAAL,KAAwBZ,KAAK,CAACC,mBAAN,CAA0BW,cAAtD,EAAsE;AAC3EZ,QAAAA,KAAK,CAACE,kBAAN,gCAA+BF,KAAK,CAACE,kBAArC,IAAyDsC,IAAzD;AACA1C,QAAAA,oBAAoB,CAACE,KAAK,CAACE,kBAAP,CAApB;AACD;AACF,KAxEQ;;AAyET;AACJ;AACA;AACA;AACA;AACI0C,IAAAA,aA9ES,yBA8EK5C,KA9EL,EA8EYwB,OA9EZ,EA8EqB;AAC5B,UAAMqB,KAAK,GAAG7C,KAAK,CAACE,kBAAN,CAAyB4C,SAAzB,CAAmC;AAAA,YAAGC,EAAH,QAAGA,EAAH;AAAA,eAAYA,EAAE,KAAKvB,OAAO,CAACuB,EAA3B;AAAA,OAAnC,CAAd;;AACA,UAAIF,KAAK,IAAI,CAAb,EAAgB;AACd7C,QAAAA,KAAK,CAACE,kBAAN,CAAyB8C,MAAzB,CAAgCH,KAAhC,EAAuC,CAAvC;AACD;AACF,KAnFQ;AAoFTI,IAAAA,KApFS,iBAoFHjD,KApFG,EAoFI;AACXkD,MAAAA,MAAM,CAACC,MAAP,CAAcnD,KAAd,EAAqB;AACnBC,QAAAA,mBAAmB,EAAE,EADF;AAEnBC,QAAAA,kBAAkB,EAAE,EAFD;AAGnBC,QAAAA,gBAAgB,EAAE,EAHC;AAInBC,QAAAA,WAAW,EAAE,KAJM;AAIC;AACpBC,QAAAA,gBAAgB,EAAE;AALC,OAArB;AAOD;AA5FQ,GAnDe;AAiJ1B+C,EAAAA,OAAO,EAAE;AACP;AACJ;AACA;AACA;AACA;AACA;AACIC,IAAAA,cAPO,0BAOQC,OAPR,EAOiB1C,cAPjB,EAOiC;AACtC,UAAI0C,OAAO,CAACtD,KAAR,CAAcI,WAAlB,EAA+B;AAC7BkD,QAAAA,OAAO,CAACC,MAAR,CAAe,aAAf,EAA8B;AAC5B/B,UAAAA,OAAO,EAAE,eADmB;AAE5BhB,UAAAA,IAAI,EAAE;AAFsB,SAA9B;AAIA;AACD;;AAPqC,2BAQW8C,OAAO,CAACtD,KARnB;AAAA,UAQ9BG,gBAR8B,kBAQ9BA,gBAR8B;AAAA,UAQZD,kBARY,kBAQZA,kBARY;AAStCR,MAAAA,GAAG,CAAC2D,cAAJ,CAAmB;AAAEzC,QAAAA,cAAc,EAAdA,cAAF;AAAkBT,QAAAA,gBAAgB,EAAhBA,gBAAlB;AAAoCe,QAAAA,KAAK,EAAE;AAA3C,OAAnB,EAAoEsC,IAApE,CAAyE,UAAAC,SAAS,EAAI;AACpF;AACAH,QAAAA,OAAO,CAACtD,KAAR,CAAcG,gBAAd,GAAiCsD,SAAS,CAACjB,IAAV,CAAerC,gBAAhD;AACAmD,QAAAA,OAAO,CAACtD,KAAR,CAAcI,WAAd,GAA4BqD,SAAS,CAACjB,IAAV,CAAepC,WAA3C,CAHoF,CAIpF;;AACAkD,QAAAA,OAAO,CAACtD,KAAR,CAAcE,kBAAd,gCAAuCuD,SAAS,CAACjB,IAAV,CAAekB,WAAtD,sBAAsExD,kBAAtE;AACAJ,QAAAA,oBAAoB,CAACwD,OAAO,CAACtD,KAAR,CAAcE,kBAAf,CAApB;AAED,OARD;AASD,KAzBM;;AA0BP;AACJ;AACA;AACA;AACA;AACA;AACIyD,IAAAA,oBAhCO,gCAgCcL,OAhCd,EAgCuB1C,cAhCvB,EAgCuC;AAC5C0C,MAAAA,OAAO,CAACC,MAAR,CAAe,wBAAf,EAD4C,CAE5C;;AACA,UAAID,OAAO,CAACtD,KAAR,CAAcC,mBAAd,CAAkCW,cAAtC,EAAsD;AACpD,YAAMgD,kBAAkB,GAAGN,OAAO,CAACtD,KAAR,CAAcC,mBAAd,CAAkCW,cAA7D;AACAlB,QAAAA,GAAG,CAACmE,cAAJ,CAAmB;AAAEjD,UAAAA,cAAc,EAAEgD;AAAlB,SAAnB;AACD,OAN2C,CAO5C;;;AACAlE,MAAAA,GAAG,CAACmE,cAAJ,CAAmB;AAAEjD,QAAAA,cAAc,EAAdA;AAAF,OAAnB,EAR4C,CAS5C;;AACA,aAAOlB,GAAG,CAACoE,sBAAJ,CAA2BlD,cAA3B,EAA2C4C,IAA3C,CAAgD,iBAAc;AAAA,YAAXhB,IAAW,SAAXA,IAAW;AACnE;AACAc,QAAAA,OAAO,CAACC,MAAR,CAAe,2BAAf,EAA4Cf,IAAI,CAACrB,YAAjD,EAFmE,CAGnE;;AACAmC,QAAAA,OAAO,CAACS,QAAR,CAAiB,gBAAjB,EAAmCnD,cAAnC,EAJmE,CAKnE;;AACA,YAAI4B,IAAI,CAACrB,YAAL,CAAkBX,IAAlB,KAA2Bb,GAAG,CAAC8B,KAAJ,CAAUuC,UAAzC,EAAqD;AACnD,iBAAOV,OAAO,CAACS,QAAR,CAAiB,oBAAjB,EAAuCvB,IAAI,CAACrB,YAAL,CAAkB8C,YAAlB,CAA+BC,OAAtE,CAAP;AACD;;AACD,eAAOC,OAAO,CAACC,OAAR,EAAP;AACD,OAVM,CAAP;AAWD;AArDM;AAjJiB,CAA5B;AA0MA,eAAerE,mBAAf","sourcesContent":["import tim from 'tim'\nimport TIM from 'tim-js-sdk'\nimport store from '..'\nimport { titleNotify } from '../../utils'\nimport { filterCallingMessage } from '../../utils/common'\nconst conversationModules = {\n  state: {\n    currentConversation: {},\n    currentMessageList: [],\n    nextReqMessageID: '',\n    isCompleted: false, // 当前会话消息列表是否已经拉完了所有消息\n    conversationList: [],\n    callingInfo: {\n      memberList: [],\n      type: 'C2C',   //C2C，GROUP\n    },\n    audioCall: false\n  },\n  getters: {\n    toAccount: state => {\n      if (!state.currentConversation || !state.currentConversation.conversationID) {\n        return ''\n      }\n      switch (state.currentConversation.type) {\n        case 'C2C':\n          return state.currentConversation.conversationID.replace('C2C', '')\n        case 'GROUP':\n          return state.currentConversation.conversationID.replace('GROUP', '')\n        default:\n          return state.currentConversation.conversationID\n      }\n    },\n    currentConversationType: state => {\n      if (!state.currentConversation || !state.currentConversation.type) {\n        return ''\n      }\n      return state.currentConversation.type\n    },\n    totalUnreadCount: state => {\n      const result = state.conversationList.reduce((count, conversation) => {\n        // 当前会话不计算总未读\n        if (!store.getters.hidden && state.currentConversation.conversationID === conversation.conversationID) {\n          return count\n        }\n        return count + conversation.unreadCount\n      }, 0)\n      titleNotify(result)\n      return result\n    },\n    // 用于当前会话的图片预览\n    imgUrlList: state => {\n      return state.currentMessageList\n        .filter(message => message.type === TIM.TYPES.MSG_IMAGE && !message.isRevoked) // 筛选出没有撤回并且类型是图片类型的消息\n        .map(message => message.payload.imageInfoArray[0].url)\n    }\n  },\n  mutations: {\n    /**\n     * 显示trtcCalling 群通话成员列表\n     * @param {Object} state\n     * @param {Conversation} setCallingList\n     */\n\n    setCallingList(state, value) {\n      state.callingInfo.memberList = value.memberList\n      state.callingInfo.type = value.type\n    },\n\n    /**\n     * 显示trtcCalling 语音通话\n     * @param {Object} state\n     * @param {Conversation} showAudioCall\n     */\n\n    showAudioCall(state, value) {\n      state.audioCall = value\n    },\n\n    /**\n     * 更新当前会话\n     * 调用时机: 切换会话时\n     * @param {Object} state\n     * @param {Conversation} conversation\n     */\n    updateCurrentConversation(state, conversation) {\n      state.currentConversation = conversation\n      state.currentMessageList = []\n      state.nextReqMessageID = ''\n      state.isCompleted = false\n    },\n    /**\n     * 更新会话列表\n     * 调用时机：触发会话列表更新事件时。CONVERSATION_LIST_UPDATED\n     * @param {Object} state\n     * @param {Conversation[]} conversationList\n     */\n    updateConversationList(state, conversationList) {\n      state.conversationList = conversationList\n    },\n    /**\n     * 重置当前会话\n     * 调用时机：需要重置当前会话时，例如：当前会话是一个群组，正好被踢出群时（被踢群事件触发），重置当前会话\n     * @param {Object} state\n     */\n    resetCurrentConversation(state) {\n      state.currentConversation = {}\n    },\n    /**\n     * 将消息插入当前会话列表\n     * 调用时机：收/发消息事件触发时\n     * @param {Object} state\n     * @param {Message[]|Message} data\n     * @returns\n     */\n    pushCurrentMessageList(state, data) {\n      // 还没当前会话，则跳过\n      if (!state.currentConversation.conversationID) {\n        return\n      }\n      if (Array.isArray(data)) {\n        // 筛选出当前会话的消息\n        const result = data.filter(item => item.conversationID === state.currentConversation.conversationID)\n        state.currentMessageList = [...state.currentMessageList, ...result]\n        filterCallingMessage(state.currentMessageList)\n      } else if (data.conversationID === state.currentConversation.conversationID) {\n        state.currentMessageList = [...state.currentMessageList, data]\n        filterCallingMessage(state.currentMessageList)\n      }\n    },\n    /**\n     * 从当前消息列表中删除某条消息\n     * @param {Object} state\n     * @param {Message} message\n     */\n    removeMessage(state, message) {\n      const index = state.currentMessageList.findIndex(({ ID }) => ID === message.ID)\n      if (index >= 0) {\n        state.currentMessageList.splice(index, 1)\n      }\n    },\n    reset(state) {\n      Object.assign(state, {\n        currentConversation: {},\n        currentMessageList: [],\n        nextReqMessageID: '',\n        isCompleted: false, // 当前会话消息列表是否已经拉完了所有消息\n        conversationList: []\n      })\n    }\n  },\n  actions: {\n    /**\n     * 获取消息列表\n     * 调用时机：打开某一会话时或下拉获取历史消息时\n     * @param {Object} context\n     * @param {String} conversationID\n     */\n    getMessageList(context, conversationID) {\n      if (context.state.isCompleted) {\n        context.commit('showMessage', {\n          message: '已经没有更多的历史消息了哦',\n          type: 'info'\n        })\n        return\n      }\n      const { nextReqMessageID, currentMessageList } = context.state\n      tim.getMessageList({ conversationID, nextReqMessageID, count: 15 }).then(imReponse => {\n        // 更新messageID，续拉时要用到\n        context.state.nextReqMessageID = imReponse.data.nextReqMessageID\n        context.state.isCompleted = imReponse.data.isCompleted\n        // 更新当前消息列表，从头部插入\n        context.state.currentMessageList = [...imReponse.data.messageList, ...currentMessageList]\n        filterCallingMessage(context.state.currentMessageList)\n\n      })\n    },\n    /**\n     * 切换会话\n     * 调用时机：切换会话时\n     * @param {Object} context\n     * @param {String} conversationID\n     */\n    checkoutConversation(context, conversationID) {\n      context.commit('resetCurrentMemberList')\n      // 1.切换会话前，将切换前的会话进行已读上报\n      if (context.state.currentConversation.conversationID) {\n        const prevConversationID = context.state.currentConversation.conversationID\n        tim.setMessageRead({ conversationID: prevConversationID })\n      }\n      // 2.待切换的会话也进行已读上报\n      tim.setMessageRead({ conversationID })\n      // 3. 获取会话信息\n      return tim.getConversationProfile(conversationID).then(({ data }) => {\n        // 3.1 更新当前会话\n        context.commit('updateCurrentConversation', data.conversation)\n        // 3.2 获取消息列表\n        context.dispatch('getMessageList', conversationID)\n        // 3.3 拉取第一页群成员列表\n        if (data.conversation.type === TIM.TYPES.CONV_GROUP) {\n          return context.dispatch('getGroupMemberList', data.conversation.groupProfile.groupID)\n        }\n        return Promise.resolve()\n      })\n    }\n  }\n}\n\nexport default conversationModules\n"]}]}