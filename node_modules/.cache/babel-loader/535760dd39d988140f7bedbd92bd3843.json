{"remainingRequest":"/Users/yuhao/TIMSDK/H5/node_modules/thread-loader/dist/cjs.js!/Users/yuhao/TIMSDK/H5/node_modules/babel-loader/lib/index.js!/Users/yuhao/TIMSDK/H5/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/yuhao/TIMSDK/H5/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yuhao/TIMSDK/H5/src/components/conversation/conversationProfile/add-group-member.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yuhao/TIMSDK/H5/src/components/conversation/conversationProfile/add-group-member.vue","mtime":1616982605597},{"path":"/Users/yuhao/TIMSDK/H5/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yuhao/TIMSDK/H5/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yuhao/TIMSDK/H5/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/yuhao/TIMSDK/H5/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yuhao/TIMSDK/H5/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport _defineProperty from \"/Users/yuhao/TIMSDK/H5/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _Input2 from \"element-ui/lib/theme-chalk/input.css\";\nimport \"element-ui/lib/theme-chalk/base.css\";\nimport _Input from \"element-ui/lib/input\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\nimport { mapState } from 'vuex';\nexport default {\n  components: {\n    ElInput: _Input\n  },\n  data: function data() {\n    return {\n      userID: ''\n    };\n  },\n  computed: _objectSpread({}, mapState({\n    currentConversation: function currentConversation(state) {\n      return state.conversation.currentConversation;\n    }\n  })),\n  methods: {\n    addGroupMember: function addGroupMember() {\n      var _this = this;\n\n      var groupID = this.currentConversation.conversationID.replace('GROUP', '');\n      this.tim.addGroupMember({\n        groupID: groupID,\n        userIDList: [this.userID]\n      }).then(function (imResponse) {\n        var _imResponse$data = imResponse.data,\n            successUserIDList = _imResponse$data.successUserIDList,\n            failureUserIDList = _imResponse$data.failureUserIDList,\n            existedUserIDList = _imResponse$data.existedUserIDList;\n\n        if (successUserIDList.length > 0) {\n          _this.$store.commit('showMessage', {\n            message: \"\\u7FA4\\u6210\\u5458\\uFF1A\".concat(successUserIDList.join(','), \"\\uFF0C\\u52A0\\u7FA4\\u6210\\u529F\"),\n            type: 'success'\n          });\n\n          _this.tim.getGroupMemberProfile({\n            groupID: groupID,\n            userIDList: successUserIDList\n          }).then(function (_ref) {\n            var memberList = _ref.data.memberList;\n\n            _this.$store.commit('updateCurrentMemberList', memberList);\n          });\n        }\n\n        if (failureUserIDList.length > 0) {\n          _this.$store.commit('showMessage', {\n            message: \"\\u7FA4\\u6210\\u5458\\uFF1A\".concat(failureUserIDList.join(','), \"\\uFF0C\\u6DFB\\u52A0\\u5931\\u8D25\\uFF01\"),\n            type: 'error'\n          });\n        }\n\n        if (existedUserIDList.length > 0) {\n          _this.$store.commit('showMessage', {\n            message: \"\\u7FA4\\u6210\\u5458\\uFF1A\".concat(existedUserIDList.join(','), \"\\uFF0C\\u5DF2\\u5728\\u7FA4\\u4E2D\")\n          });\n        }\n      }).catch(function (error) {\n        _this.$store.commit('showMessage', {\n          type: 'error',\n          message: error.message\n        });\n      });\n    }\n  }\n};",null]}