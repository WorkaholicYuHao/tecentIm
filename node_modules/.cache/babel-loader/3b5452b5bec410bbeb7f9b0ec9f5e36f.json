{"remainingRequest":"/Users/yuhao/TIMSDK/H5/node_modules/thread-loader/dist/cjs.js!/Users/yuhao/TIMSDK/H5/node_modules/babel-loader/lib/index.js!/Users/yuhao/TIMSDK/H5/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/yuhao/TIMSDK/H5/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yuhao/TIMSDK/H5/src/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yuhao/TIMSDK/H5/src/index.vue","mtime":1617098371623},{"path":"/Users/yuhao/TIMSDK/H5/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yuhao/TIMSDK/H5/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yuhao/TIMSDK/H5/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/yuhao/TIMSDK/H5/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yuhao/TIMSDK/H5/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _Notification2 from \"element-ui/lib/theme-chalk/notification.css\";\nimport \"element-ui/lib/theme-chalk/base.css\";\nimport _Notification from \"element-ui/lib/notification\";\nimport \"core-js/modules/es6.function.name\";\nimport _defineProperty from \"/Users/yuhao/TIMSDK/H5/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapState } from 'vuex';\nimport CurrentConversation from \"./components/conversation/current-conversation\";\nimport SideBar from \"./components/layout/side-bar\";\nimport Login from \"./components/user/login\";\nimport ImagePreviewer from \"./components/message/image-previewer.vue\";\nimport QrCodeList from \"./components/qr-code-list\";\nimport { translateGroupSystemNotice } from \"./utils/common\";\nimport GroupLive from \"./components/group-live/index\";\nimport Calling from \"./components/message/trtc-calling/calling-index\";\nimport { ACTION } from \"./utils/trtcCustomMessageMap\";\nimport MTA from \"./utils/mta\";\nexport default {\n  title: 'TIMSDK DEMO',\n  data: function data() {\n    return {\n      loginType: 2,\n      // github 登录只使用默认账号登录,\n      ifSuccess: false\n    };\n  },\n  components: {\n    Login: Login,\n    SideBar: SideBar,\n    CurrentConversation: CurrentConversation,\n    ImagePreviewer: ImagePreviewer,\n    QrCodeList: QrCodeList,\n    GroupLive: GroupLive,\n    Calling: Calling\n  },\n  computed: _objectSpread(_objectSpread({}, mapState({\n    currentUserProfile: function currentUserProfile(state) {\n      return state.user.currentUserProfile;\n    },\n    currentConversation: function currentConversation(state) {\n      return state.conversation.currentConversation;\n    },\n    videoCall: function videoCall(state) {\n      return state.conversation.videoCall;\n    },\n    audioCall: function audioCall(state) {\n      return state.conversation.audioCall;\n    },\n    isLogin: function isLogin(state) {\n      return state.user.isLogin;\n    },\n    isSDKReady: function isSDKReady(state) {\n      return state.user.isSDKReady;\n    },\n    isBusy: function isBusy(state) {\n      return state.video.isBusy;\n    },\n    userID: function userID(state) {\n      return state.user.userID;\n    },\n    userSig: function userSig(state) {\n      return state.user.userSig;\n    },\n    sdkAppID: function sdkAppID(state) {\n      return state.user.sdkAppID;\n    }\n  })), {}, {\n    // 是否显示 Loading 状态\n    showLoading: function showLoading() {\n      return !this.isSDKReady;\n    }\n  }),\n  mounted: function mounted() {\n    // 初始化监听器\n    this.initListener();\n  },\n  watch: {\n    isLogin: function isLogin(next) {\n      if (next) {\n        MTA.clickStat('link_two', {\n          show: 'true'\n        });\n      }\n    }\n  },\n  methods: {\n    initListener: function initListener() {\n      // 登录成功后会触发 SDK_READY 事件，该事件触发后，可正常使用 SDK 接口\n      this.tim.on(this.TIM.EVENT.SDK_READY, this.onReadyStateUpdate, this); // SDK NOT READT\n\n      this.tim.on(this.TIM.EVENT.SDK_NOT_READY, this.onReadyStateUpdate, this); // 被踢出\n\n      this.tim.on(this.TIM.EVENT.KICKED_OUT, this.onKickOut); // SDK内部出错\n\n      this.tim.on(this.TIM.EVENT.ERROR, this.onError); // 收到新消息\n\n      this.tim.on(this.TIM.EVENT.MESSAGE_RECEIVED, this.onReceiveMessage); // 会话列表更新\n\n      this.tim.on(this.TIM.EVENT.CONVERSATION_LIST_UPDATED, this.onUpdateConversationList); // 群组列表更新\n\n      this.tim.on(this.TIM.EVENT.GROUP_LIST_UPDATED, this.onUpdateGroupList); // 网络监测\n\n      this.tim.on(this.TIM.EVENT.NET_STATE_CHANGE, this.onNetStateChange); // 已读回执\n\n      this.tim.on(this.TIM.EVENT.MESSAGE_READ_BY_PEER, this.onMessageReadByPeer);\n    },\n    onReceiveMessage: function onReceiveMessage(_ref) {\n      var messageList = _ref.data;\n      this.handleVideoMessage(messageList);\n      this.handleQuitGroupTip(messageList);\n      this.handleCloseGroupLive(messageList);\n      this.$store.commit('pushCurrentMessageList', messageList);\n      this.$store.commit('pushAvChatRoomMessageList', messageList);\n    },\n    onError: function onError(_ref2) {\n      var data = _ref2.data;\n\n      if (data.message !== 'Network Error') {\n        this.$store.commit('showMessage', {\n          message: data.message,\n          type: 'error'\n        });\n      }\n    },\n    onMessageReadByPeer: function onMessageReadByPeer() {},\n    onReadyStateUpdate: function onReadyStateUpdate(_ref3) {\n      var _this = this;\n\n      var name = _ref3.name;\n      var isSDKReady = name === this.TIM.EVENT.SDK_READY ? true : false;\n      this.$store.commit('toggleIsSDKReady', isSDKReady);\n\n      if (isSDKReady) {\n        this.tim.getMyProfile().then(function (_ref4) {\n          var data = _ref4.data;\n\n          _this.$store.commit('updateCurrentUserProfile', data);\n        }).catch(function (error) {\n          _this.$store.commit('showMessage', {\n            type: 'error',\n            message: error.message\n          });\n        });\n        this.$store.dispatch('getBlacklist'); // 登录trtc calling\n\n        this.trtcCalling.login({\n          sdkAppID: this.sdkAppID,\n          userID: this.userID,\n          userSig: this.userSig\n        });\n      }\n    },\n    kickedOutReason: function kickedOutReason(type) {\n      switch (type) {\n        case this.TIM.TYPES.KICKED_OUT_MULT_ACCOUNT:\n          return '由于多实例登录';\n\n        case this.TIM.TYPES.KICKED_OUT_MULT_DEVICE:\n          return '由于多设备登录';\n\n        case this.TIM.TYPES.KICKED_OUT_USERSIG_EXPIRED:\n          return '由于 userSig 过期';\n\n        default:\n          return '';\n      }\n    },\n    checkoutNetState: function checkoutNetState(state) {\n      switch (state) {\n        case this.TIM.TYPES.NET_STATE_CONNECTED:\n          return {\n            message: '已接入网络',\n            type: 'success'\n          };\n\n        case this.TIM.TYPES.NET_STATE_CONNECTING:\n          return {\n            message: '当前网络不稳定',\n            type: 'warning'\n          };\n\n        case this.TIM.TYPES.NET_STATE_DISCONNECTED:\n          return {\n            message: '当前网络不可用',\n            type: 'error'\n          };\n\n        default:\n          return '';\n      }\n    },\n    onNetStateChange: function onNetStateChange(event) {\n      this.$store.commit('showMessage', this.checkoutNetState(event.data.state));\n    },\n    onKickOut: function onKickOut(event) {\n      this.$store.commit('showMessage', {\n        message: \"\".concat(this.kickedOutReason(event.data.type), \"\\u88AB\\u8E22\\u51FA\\uFF0C\\u8BF7\\u91CD\\u65B0\\u767B\\u5F55\\u3002\"),\n        type: 'error'\n      });\n      this.$store.commit('toggleIsLogin', false);\n      this.$store.commit('reset');\n    },\n    onUpdateConversationList: function onUpdateConversationList(event) {\n      this.$store.commit('updateConversationList', event.data);\n    },\n    onUpdateGroupList: function onUpdateGroupList(event) {\n      this.$store.commit('updateGroupList', event.data);\n    },\n    onReceiveGroupSystemNotice: function onReceiveGroupSystemNotice(event) {\n      var _this2 = this;\n\n      var isKickedout = event.data.type === 4;\n      var isCurrentConversation = \"GROUP\".concat(event.data.message.payload.groupProfile.groupID) === this.currentConversation.conversationID; // 在当前会话被踢，需reset当前会话\n\n      if (isKickedout && isCurrentConversation) {\n        this.$store.commit('resetCurrentConversation');\n      }\n\n      _Notification({\n        title: '新系统通知',\n        message: translateGroupSystemNotice(event.data.message),\n        duration: 3000,\n        onClick: function onClick() {\n          var SystemConversationID = '@TIM#SYSTEM';\n\n          _this2.$store.dispatch('checkoutConversation', SystemConversationID);\n        }\n      });\n    },\n    selectConversation: function selectConversation(conversationID) {\n      if (conversationID !== this.currentConversation.conversationID) {\n        this.$store.dispatch('checkoutConversation', conversationID);\n      }\n    },\n    isJsonStr: function isJsonStr(str) {\n      try {\n        JSON.parse(str);\n        return true;\n      } catch (_unused) {\n        return false;\n      }\n    },\n    handleVideoMessage: function handleVideoMessage(messageList) {\n      var _this3 = this;\n\n      var videoMessageList = messageList.filter(function (message) {\n        return message.type === _this3.TIM.TYPES.MSG_CUSTOM && _this3.isJsonStr(message.payload.data);\n      });\n      if (videoMessageList.length === 0) return;\n      var videoPayload = JSON.parse(videoMessageList[0].payload.data);\n\n      if (videoPayload.action === ACTION.VIDEO_CALL_ACTION_DIALING) {\n        if (this.isBusy) {\n          this.$bus.$emit('busy', videoPayload, videoMessageList[0]);\n          return;\n        }\n\n        this.$store.commit('GENERATE_VIDEO_ROOM', videoPayload.room_id);\n        this.selectConversation(videoMessageList[0].conversationID); // 切换当前会话页\n\n        if (videoMessageList[0].from !== this.userID) {\n          this.$bus.$emit('isCalled');\n        }\n      }\n\n      if (videoPayload.action === ACTION.VIDEO_CALL_ACTION_SPONSOR_CANCEL) {\n        this.$bus.$emit('missCall');\n      }\n\n      if (videoPayload.action === ACTION.VIDEO_CALL_ACTION_REJECT) {\n        this.$bus.$emit('isRefused');\n      }\n\n      if (videoPayload.action === ACTION.VIDEO_CALL_ACTION_SPONSOR_TIMEOUT) {\n        this.$bus.$emit('missCall');\n      }\n\n      if (videoPayload.action === ACTION.VIDEO_CALL_ACTION_ACCEPTED) {\n        this.$bus.$emit('isAccept');\n      }\n\n      if (videoPayload.action === ACTION.VIDEO_CALL_ACTION_HANGUP) {\n        this.$bus.$emit('isHungUp');\n      }\n\n      if (videoPayload.action === ACTION.VIDEO_CALL_ACTION_LINE_BUSY) {\n        this.$bus.$emit('isRefused');\n      }\n\n      if (videoPayload.action === ACTION.VIDEO_CALL_ACTION_ERROR) {\n        this.$bus.$emit('isRefused');\n      }\n    },\n\n    /**\n     * 使用 window.Notification 进行全局的系统通知\n     * @param {Message} message\n     */\n    notifyMe: function notifyMe(message) {\n      var _this4 = this;\n\n      // 需检测浏览器支持和用户授权\n      if (!('Notification' in window)) {\n        return;\n      } else if (window.Notification.permission === 'granted') {\n        this.handleNotify(message);\n      } else if (window.Notification.permission !== 'denied') {\n        window.Notification.requestPermission().then(function (permission) {\n          // 如果用户同意，就可以向他们发送通知\n          if (permission === 'granted') {\n            _this4.handleNotify(message);\n          }\n        });\n      }\n    },\n    handleNotify: function handleNotify(message) {\n      var _this5 = this;\n\n      var notification = new window.Notification('有人提到了你', {\n        icon: 'https://webim-1252463788.file.myqcloud.com/demo/img/logo.dc3be0d4.png',\n        body: message.payload.text\n      });\n\n      notification.onclick = function () {\n        window.focus();\n\n        _this5.$store.dispatch('checkoutConversation', message.conversationID);\n\n        notification.close();\n      };\n    },\n    handleLinkClick: function handleLinkClick() {\n      MTA.clickStat('link_two', {\n        click: 'true'\n      });\n    },\n\n    /**\n     * 收到有群成员退群/被踢出的groupTip时，需要将相关群成员从当前会话的群成员列表中移除\n     * @param {Message[]} messageList\n     */\n    handleQuitGroupTip: function handleQuitGroupTip(messageList) {\n      var _this6 = this;\n\n      // 筛选出当前会话的退群/被踢群的 groupTip\n      var groupTips = messageList.filter(function (message) {\n        return _this6.currentConversation.conversationID === message.conversationID && message.type === _this6.TIM.TYPES.MSG_GRP_TIP && (message.payload.operationType === _this6.TIM.TYPES.GRP_TIP_MBR_QUIT || message.payload.operationType === _this6.TIM.TYPES.GRP_TIP_MBR_KICKED_OUT);\n      }); // 清理当前会话的群成员列表\n\n      if (groupTips.length > 0) {\n        groupTips.forEach(function (groupTip) {\n          if (Array.isArray(groupTip.payload.userIDList) || groupTip.payload.userIDList.length > 0) {\n            _this6.$store.commit('deleteGroupMemberList', groupTip.payload.userIDList);\n          }\n        });\n      }\n    },\n\n    /**\n     * 收到结束直播自定义消息，派发事件关闭组件\n     * @param {Message[]} messageList\n     */\n    handleCloseGroupLive: function handleCloseGroupLive(messageList) {\n      var _this7 = this;\n\n      messageList.forEach(function (message) {\n        if (_this7.currentConversation.conversationID === message.conversationID && message.type === _this7.TIM.TYPES.MSG_CUSTOM) {\n          var data = {};\n\n          try {\n            data = JSON.parse(message.payload.data);\n          } catch (e) {\n            data = {};\n          }\n\n          if (data.roomId && Number(data.roomStatus) === 0) {\n            _this7.$bus.$emit('close-group-live');\n          }\n        }\n      });\n    }\n  }\n};",null]}