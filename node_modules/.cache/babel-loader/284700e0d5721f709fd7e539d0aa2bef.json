{"remainingRequest":"/Users/yuhao/TIMSDK/H5/node_modules/thread-loader/dist/cjs.js!/Users/yuhao/TIMSDK/H5/node_modules/babel-loader/lib/index.js!/Users/yuhao/TIMSDK/H5/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/yuhao/TIMSDK/H5/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yuhao/TIMSDK/H5/src/components/message/trtc-calling/calling-index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yuhao/TIMSDK/H5/src/components/message/trtc-calling/calling-index.vue","mtime":1616982605605},{"path":"/Users/yuhao/TIMSDK/H5/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yuhao/TIMSDK/H5/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yuhao/TIMSDK/H5/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/yuhao/TIMSDK/H5/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yuhao/TIMSDK/H5/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.array.find-index\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/yuhao/TIMSDK/H5/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _defineProperty from \"/Users/yuhao/TIMSDK/H5/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapGetters, mapState } from 'vuex';\nimport { formatDuration } from \"../../../utils/formatDuration\";\nexport default {\n  name: 'CallLayer',\n  data: function data() {\n    return {\n      timeout: null,\n      callType: 1,\n      //1:audio，2:video\n      Trtc: undefined,\n      isCamOn: true,\n      isMicOn: true,\n      isInvitedMicOn: true,\n      maskShow: false,\n      isLocalMain: true,\n      // 本地视频是否是主屏幕显示\n      start: 0,\n      end: 0,\n      duration: 0,\n      hangUpTimer: 0,\n      // 通话计时id\n      ready: false,\n      dialling: false,\n      // 是否拨打电话中\n      calling: false,\n      // 是否通话中\n      isDialled: false,\n      // 是否被呼叫\n      inviteID: '',\n      inviteData: {},\n      sponsor: '',\n      //发起者\n      invitedUserID: [],\n      //被邀请者\n      invitedNick: '',\n      invitedUserInfo: [],\n      defaultAvatar: 'https://imgcache.qq.com/open/qcloud/video/act/webim-avatar/avatar-3.png',\n      viewLocalDomID: '',\n      callingUserList: [],\n      // 参加通话的人 ,不包括自己\n      callingType: 'C2C',\n      //区分多人和C2C通话的UI样式\n      isStartLocalView: false,\n      //本地是否开启\n      callingTips: {\n        callEnd: 1,\n        //通话结束\n        callTimeout: 5\n      }\n    };\n  },\n  computed: _objectSpread(_objectSpread(_objectSpread({}, mapGetters(['toAccount', 'currentConversationType'])), mapState({\n    currentConversation: function currentConversation(state) {\n      return state.conversation.currentConversation;\n    },\n    currentUserProfile: function currentUserProfile(state) {\n      return state.user.currentUserProfile;\n    },\n    callingInfo: function callingInfo(state) {\n      return state.conversation.callingInfo;\n    },\n    userID: function userID(state) {\n      return state.user.userID;\n    },\n    userSig: function userSig(state) {\n      return state.user.userSig;\n    },\n    videoRoom: function videoRoom(state) {\n      return state.video.videoRoom;\n    },\n    sdkAppID: function sdkAppID(state) {\n      return state.user.sdkAppID;\n    }\n  })), {}, {\n    formatDurationStr: function formatDurationStr() {\n      return formatDuration(this.duration);\n    },\n    myAvatar: function myAvatar() {\n      return this.currentUserProfile.avatar || this.defaultAvatar;\n    },\n    myNick: function myNick() {\n      return this.currentUserProfile.nick || this.userID;\n    }\n  }),\n  created: function created() {\n    this.initListener();\n  },\n  watch: {\n    callingUserList: {\n      handler: function handler(newValue) {\n        var _this = this;\n\n        if (newValue.length < 2 && this.calling) {\n          //单人通话\n          this.$nextTick(function () {\n            var elementId = \"video-\".concat(newValue[0]);\n            var element = window.document.getElementById(elementId);\n            var local = window.document.getElementById('local');\n            var group_element = window.document.getElementById('small-group'); // element.addEventListener('click', this.changeMainVideo)\n            // local.addEventListener('click', this.changeMainVideo)\n\n            if (!element || !element.classList) {\n              return;\n            }\n\n            if (!local || !local.classList) {\n              return;\n            }\n\n            element && element.classList.remove('video-box');\n            local && local.classList.remove('video-box');\n            group_element && group_element.classList.add('small-group_box');\n            _this.isLocalMain ? element.classList.add('big') : element.classList.add('small');\n            _this.isLocalMain ? local.classList.add('small') : element.classList.add('big');\n          });\n          return;\n        }\n\n        if (newValue.length >= 2 && this.calling) {\n          var group_element = window.document.getElementById('small-group');\n          group_element && group_element.classList.remove('small-group_box');\n          var elements = window.document.getElementById('small-group').childNodes;\n          elements.forEach(function (item, index) {\n            if (index === 0) {\n              item.classList.remove('small');\n            }\n\n            item.classList.remove('big');\n            item.classList.add('video-box');\n          });\n        }\n      },\n      deep: true,\n      immediate: true\n    }\n  },\n  destroyed: function destroyed() {\n    var _this2 = this;\n\n    this.removeListener();\n    window.addEventListener('beforeunload', function () {\n      _this2.videoCallLogOut();\n    });\n    window.addEventListener('leave', function () {\n      _this2.videoCallLogOut();\n    });\n  },\n  mounted: function mounted() {\n    this.$bus.$on('video-call', this.videoCalling); // 发起通话\n\n    this.$bus.$on('audio-call', this.audioCalling); // 发起通话\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.$bus.$off('video-call', this.videoCalling);\n    this.$bus.$off('audio-call', this.audioCalling); // 发起通话\n  },\n  methods: {\n    videoCallLogOut: function videoCallLogOut() {\n      // 针对，刷新页面，关闭Tab，登出情况下，通话断开的逻辑\n      if (this.dialling || this.calling) {\n        this.leave();\n      }\n\n      if (this.isDialled) {\n        this.refuse();\n      }\n    },\n    initListener: function initListener() {\n      // sdk内部发生了错误\n      this.trtcCalling.on(this.TRTCCalling.EVENT.ERROR, this.handleError); // 被邀请进行通话\n\n      this.trtcCalling.on(this.TRTCCalling.EVENT.INVITED, this.handleNewInvitationReceived); // 有用户同意进入通话，那么会收到此回调\n\n      this.trtcCalling.on(this.TRTCCalling.EVENT.USER_ENTER, this.handleUserEnter); // 如果有用户同意离开通话，那么会收到此回调\n\n      this.trtcCalling.on(this.TRTCCalling.EVENT.USER_LEAVE, this.handleUserLeave); // 用户拒绝通话\n\n      this.trtcCalling.on(this.TRTCCalling.EVENT.REJECT, this.handleInviteeReject); //邀请方忙线\n\n      this.trtcCalling.on(this.TRTCCalling.EVENT.LINE_BUSY, this.handleInviteeLineBusy); // 作为被邀请方会收到，收到该回调说明本次通话被取消了\n\n      this.trtcCalling.on(this.TRTCCalling.EVENT.CALLING_CANCEL, this.handleInviterCancel); // 重复登陆，收到该回调说明被踢出房间\n\n      this.trtcCalling.on(this.TRTCCalling.EVENT.KICKED_OUT, this.handleKickedOut); // 作为邀请方会收到，收到该回调说明本次通话超时未应答\n\n      this.trtcCalling.on(this.TRTCCalling.EVENT.CALLING_TIMEOUT, this.handleCallTimeout); // 邀请用户无应答\n\n      this.trtcCalling.on(this.TRTCCalling.EVENT.NO_RESP, this.handleNoResponse); // 收到该回调说明本次通话结束了\n\n      this.trtcCalling.on(this.TRTCCalling.EVENT.CALLING_END, this.handleCallEnd); // 远端用户开启/关闭了摄像头, 会收到该回调\n\n      this.trtcCalling.on(this.TRTCCalling.EVENT.USER_VIDEO_AVAILABLE, this.handleUserVideoChange); // 远端用户开启/关闭了麦克风, 会收到该回调\n\n      this.trtcCalling.on(this.TRTCCalling.EVENT.USER_AUDIO_AVAILABLE, this.handleUserAudioChange);\n    },\n    removeListener: function removeListener() {\n      this.trtcCalling.off(this.TRTCCalling.EVENT.ERROR, this.handleError);\n      this.trtcCalling.off(this.TRTCCalling.EVENT.INVITED, this.handleNewInvitationReceived);\n      this.trtcCalling.off(this.TRTCCalling.EVENT.USER_ENTER, this.handleUserEnter);\n      this.trtcCalling.off(this.TRTCCalling.EVENT.USER_LEAVE, this.handleUserLeave);\n      this.trtcCalling.off(this.TRTCCalling.EVENT.REJECT, this.handleInviteeReject);\n      this.trtcCalling.off(this.TRTCCalling.EVENT.LINE_BUSY, this.handleInviteeLineBusy);\n      this.trtcCalling.off(this.TRTCCalling.EVENT.CALLING_CANCEL, this.handleInviterCancel);\n      this.trtcCalling.off(this.TRTCCalling.EVENT.KICKED_OUT, this.handleKickedOut);\n      this.trtcCalling.off(this.TRTCCalling.EVENT.CALLING_TIMEOUT, this.handleCallTimeout);\n      this.trtcCalling.off(this.TRTCCalling.EVENT.NO_RESP, this.handleNoResponse);\n      this.trtcCalling.off(this.TRTCCalling.EVENT.CALLING_END, this.handleCallEnd);\n      this.trtcCalling.off(this.TRTCCalling.EVENT.USER_VIDEO_AVAILABLE, this.handleUserVideoChange);\n      this.trtcCalling.off(this.TRTCCalling.EVENT.USER_AUDIO_AVAILABLE, this.handleUserAudioChange);\n    },\n    handleError: function handleError() {},\n    // 被呼叫  接听方\n    handleNewInvitationReceived: function () {\n      var _handleNewInvitationReceived = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(payload) {\n        var inviteID, sponsor, inviteData, userIDList, isGroupCall;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                inviteID = payload.inviteID, sponsor = payload.sponsor, inviteData = payload.inviteData, userIDList = payload.userIDList, isGroupCall = payload.isGroupCall;\n                this.inviteID = inviteID;\n                this.inviteData = inviteData;\n                this.callType = inviteData.callType;\n                this.sponsor = sponsor;\n                this.invitedUserID = JSON.parse(JSON.stringify(userIDList)); //被邀请者\n\n                this.callingInfo.type = isGroupCall ? this.TIM.TYPES.CONV_GROUP : this.TIM.TYPES.CONV_C2C;\n                this.changeState('isDialled', true);\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function handleNewInvitationReceived(_x) {\n        return _handleNewInvitationReceived.apply(this, arguments);\n      }\n\n      return handleNewInvitationReceived;\n    }(),\n    accept: function accept() {\n      var _this3 = this;\n\n      this.trtcCalling.accept({\n        inviteID: this.inviteID,\n        roomID: this.inviteData.roomID,\n        callType: this.inviteData.callType\n      }).then(function (res) {\n        // this.callType = this.inviteData.callType\n        _this3.changeState('calling', true);\n\n        res.data.message.nick = _this3.currentUserProfile.nick;\n\n        _this3.$store.commit('pushCurrentMessageList', res.data.message);\n      });\n    },\n    reject: function reject() {\n      var _this4 = this;\n\n      var callType = this.inviteData.callType;\n      this.trtcCalling.reject({\n        inviteID: this.inviteID,\n        isBusy: false,\n        callType: callType\n      }).then(function (res) {\n        res.data.message.nick = _this4.currentUserProfile.nick;\n\n        _this4.$store.commit('pushCurrentMessageList', res.data.message);\n      });\n    },\n    handleDebounce: function handleDebounce(func, wait) {\n      var context = this;\n      var args = arguments;\n      if (this.timeout) clearTimeout(this.timeout);\n      this.timeout = setTimeout(function () {\n        func.apply(context, args);\n      }, wait);\n    },\n    // 双方建立连接\n    handleUserEnter: function handleUserEnter(_ref) {\n      var _this5 = this;\n\n      var userID = _ref.userID;\n      this.changeState('dialling', true);\n      this.isAccept(); // 判断是否为多人通话\n\n      if (this.callingUserList.length >= 2) {\n        this.callingType = this.TIM.TYPES.CONV_GROUP;\n      }\n\n      if (this.callingUserList.indexOf(userID) === -1) {\n        if (this.callType === this.TRTCCalling.CALL_TYPE.AUDIO_CALL) {\n          this.getUserAvatar(userID);\n        } else {\n          this.callingUserList.push(userID);\n        }\n      }\n\n      if (this.callType === this.TRTCCalling.CALL_TYPE.VIDEO_CALL) {\n        this.$nextTick(function () {\n          if (!_this5.isStartLocalView) {\n            _this5.startLocalView(); //本地只开启一次\n\n          }\n\n          _this5.startRemoteView(userID); //远端多次拉流\n\n        });\n      }\n    },\n    // 通话已建立\n    handleUserLeave: function handleUserLeave(_ref2) {\n      var userID = _ref2.userID;\n\n      if (this.callType === this.TRTCCalling.CALL_TYPE.AUDIO_CALL) {\n        // 语音通话\n        var _index = this.invitedUserInfo.findIndex(function (item) {\n          return item.userID === userID;\n        });\n\n        if (_index >= 0) {\n          this.invitedUserInfo.splice(_index, 1);\n        }\n\n        return;\n      }\n\n      var index = this.callingUserList.findIndex(function (item) {\n        return item === userID;\n      });\n\n      if (index >= 0) {\n        this.callingUserList.splice(index, 1);\n      }\n    },\n    // 通知呼叫方，未接通\n    //userID:invitee(被邀请者）\n    handleInviteeReject: function handleInviteeReject(_ref3) {\n      var userID = _ref3.userID;\n\n      if (this.userID === this.sponsor) {\n        // 发起者\n        this.setCallingstatus(userID);\n        this.$store.commit('showMessage', {\n          message: \"\".concat(userID, \"\\u62D2\\u7EDD\\u901A\\u8BDD\")\n        });\n      }\n    },\n    setCallingstatus: function setCallingstatus(userID) {\n      var _index = this.invitedUserID.indexOf(userID);\n\n      if (_index >= 0) {\n        this.invitedUserID.splice(_index, 1);\n      }\n\n      if (this.invitedUserID.length === 0) {\n        this.changeState('isDialled', false);\n        this.changeState('dialling', false);\n      }\n    },\n    // 通知呼叫方，对方在忙碌，未接通\n    handleInviteeLineBusy: function handleInviteeLineBusy(_ref4) {\n      var sponsor = _ref4.sponsor,\n          userID = _ref4.userID;\n\n      // A call B,C call A, A在忙线， 拒绝通话，对于呼叫者C收到通知，XXX在忙线\n      if (sponsor === this.userID) {\n        this.setCallingstatus(userID);\n        this.$store.commit('showMessage', {\n          message: \"\".concat(userID, \"\\u5FD9\\u7EBF\")\n        });\n      }\n    },\n    // 通知被呼叫方，邀请被取消，未接通\n    handleInviterCancel: function handleInviterCancel() {\n      // 邀请被取消\n      this.changeState('isDialled', false);\n      this.$store.commit('showMessage', {\n        message: '通话已取消'\n      });\n    },\n    handleKickedOut: function handleKickedOut() {// //重复登陆，被踢出房间\n      // this.trtcCalling.logout();\n      // this.$store.commit(\"userLogoutSuccess\");\n    },\n    // 当自己收到对端超时的信令时，或者当我是被邀请者但自己超时了，通知上层通话超时\n    // case: A呼叫B，B在线，B超时未响应，B会触发该事件，A也会触发该事件\n    handleCallTimeout: function handleCallTimeout(_ref5) {\n      var _this6 = this;\n\n      var userIDList = _ref5.userIDList;\n\n      if (this.calling) {\n        return;\n      }\n\n      if (this.userID === this.sponsor) {\n        // 该用户是邀请者\n        userIDList.forEach(function (userID) {\n          _this6.setCallingstatus(userID); //超时未接听\n\n        });\n        return;\n      } //用户是被邀请者\n\n\n      if (userIDList.indexOf(this.userID) > -1) {\n        //当超时者是自己时，添加消息\n        //会话列表切换后发消息\n        this.toAccount && this.sendMessage(this.userID, '', this.callingTips.callTimeout);\n      }\n\n      this.changeState('isDialled', false);\n    },\n    // 双方，通话已建立, 通话结束\n    handleCallEnd: function handleCallEnd(_ref6) {\n      var userID = _ref6.userID,\n          callEnd = _ref6.callEnd;\n\n      // 自己挂断的要补充消息  被邀请者都无应答时结束\n      // 历史消息中没有通话结束\n      if (userID === this.userID && this.invitedUserID.length === 0 || this.callingUserList === 0) {\n        this.sendMessage(userID, callEnd, this.callingTips.callEnd);\n      } //   this.changeState('isDialled', false)\n      //   this.changeState('calling', false)\n\n\n      this.changeState('dialling', false);\n      this.isMicOn = true;\n      this.isCamOn = true;\n      this.maskShow = false;\n      this.isStartLocalView = false; // this.$store.commit('showMessage', {\n      //   message: '通话已结束'\n      // })\n    },\n    // 自己超时且是邀请发起者，需主动挂断，并通知上层对端无应答\n    handleNoResponse: function handleNoResponse(_ref7) {\n      var _this7 = this;\n\n      var sponsor = _ref7.sponsor,\n          userIDList = _ref7.userIDList;\n\n      //邀请者\n      if (sponsor === this.userID) {\n        userIDList.forEach(function (userID) {\n          _this7.setCallingstatus(userID);\n        });\n\n        if (userIDList.indexOf(this.userID) === -1) {\n          //当超时者是自己时，添加消息\n          this.sendMessage(userIDList, '', this.callingTips.callTimeout);\n        }\n      }\n    },\n    handleUserVideoChange: function handleUserVideoChange() {},\n    handleUserAudioChange: function handleUserAudioChange(payload) {\n      var _index = this.invitedUserInfo.findIndex(function (item) {\n        return item.userID === payload.userID;\n      });\n\n      if (_index >= 0) {\n        this.invitedUserInfo[_index].isInvitedMicOn = payload.isAudioAvailable;\n      } // this.isInvitedMicOn = payload.isAudioAvailable\n\n    },\n    // 播放本地流\n    startLocalView: function startLocalView() {\n      var _this8 = this;\n\n      this.trtcCalling.startLocalView({\n        userID: this.userID,\n        videoViewDomID: 'local'\n      }).then(function () {\n        _this8.isStartLocalView = true;\n      });\n    },\n    // 没有用到\n    stopLocalView: function stopLocalView() {\n      this.trtcCalling.stopLocalView({\n        userID: this.userID,\n        videoViewDomID: this.viewLocalDomID\n      });\n    },\n    // 播放远端流\n    startRemoteView: function startRemoteView(userID) {\n      this.trtcCalling.startRemoteView({\n        userID: userID,\n        videoViewDomID: \"video-\".concat(userID)\n      }).then(function () {});\n    },\n    //没有用到\n    stopRemoteView: function stopRemoteView(userID) {\n      this.trtcCalling.stopRemoteView({\n        userID: this.userID,\n        videoViewDomID: \"video-\".concat(userID)\n      });\n    },\n    //获取被呼叫者信息\n    getUserAvatar: function getUserAvatar(userID) {\n      var _this9 = this;\n\n      var _index = this.invitedUserInfo.findIndex(function (item) {\n        return item.userID === userID;\n      });\n\n      if (_index >= 0) {\n        return;\n      }\n\n      var _userIDList = [userID];\n      var promise = this.tim.getUserProfile({\n        userIDList: _userIDList // 请注意：即使只拉取一个用户的资料，也需要用数组类型，例如：userIDList: ['user1']\n\n      });\n      promise.then(function (imResponse) {\n        if (imResponse.data[0]) {\n          _this9.invitedUserInfo.push(imResponse.data[0]);\n        }\n      }).catch(function () {});\n    },\n    changeState: function changeState(state, boolean) {\n      var _this10 = this;\n\n      var stateList = ['dialling', 'isDialled', 'calling'];\n      stateList.forEach(function (item) {\n        _this10[item] = item === state ? boolean : false;\n      });\n      this.$store.commit('UPDATE_ISBUSY', stateList.some(function (item) {\n        return _this10[item];\n      })); // 若stateList 中存在 true , isBusy 为 true\n    },\n    videoCalling: function videoCalling() {\n      var _this11 = this;\n\n      // 发起通话\n      // 初始化被邀请者\n      this.invitedUserID = JSON.parse(JSON.stringify(this.callingInfo.memberList));\n      this.sponsor = this.userID;\n\n      if (this.calling) {\n        // 避免通话按钮多次快速的点击\n        return;\n      }\n\n      this.callType = this.TRTCCalling.CALL_TYPE.VIDEO_CALL;\n      this.isLocalMain = true; // 可设置超时\n\n      if (this.callingInfo.type === this.TIM.TYPES.CONV_C2C) {\n        this.trtcCalling.call({\n          userID: this.callingInfo.memberList[0],\n          type: this.callType,\n          timeout: 30\n        }).then(function (res) {\n          res.data.message.nick = _this11.currentUserProfile.nick;\n\n          _this11.$store.commit('pushCurrentMessageList', res.data.message);\n\n          _this11.changeState('dialling', true);\n        });\n      } else {\n        this.trtcCalling.groupCall({\n          userIDList: this.callingInfo.memberList,\n          type: this.callType,\n          groupID: this.currentConversation.groupProfile.groupID,\n          timeout: 30\n        }).then(function (res) {\n          res.data.message.nick = _this11.currentUserProfile.nick;\n\n          _this11.$store.commit('pushCurrentMessageList', res.data.message);\n\n          _this11.changeState('dialling', true);\n        });\n      }\n    },\n    audioCalling: function audioCalling() {\n      var _this12 = this;\n\n      // 发起通话\n      // 初始化被邀请者\n      this.invitedUserID = this.callingInfo.memberList;\n      this.sponsor = this.userID;\n\n      if (this.calling) {\n        // 避免通话按钮多次快速的点击\n        return;\n      } // // 发起者获取被邀约人信息\n      // this.getUserAvatar()\n      // 可设置超时\n\n\n      this.callType = this.TRTCCalling.CALL_TYPE.AUDIO_CALL;\n\n      if (this.callingInfo.type === 'C2C') {\n        this.trtcCalling.call({\n          userID: this.callingInfo.memberList[0],\n          type: this.callType,\n          timeout: 30\n        }).then(function (res) {\n          _this12.changeState('dialling', true);\n\n          res.data.message.nick = _this12.currentUserProfile.nick;\n\n          _this12.$store.commit('pushCurrentMessageList', res.data.message);\n        });\n      } else {\n        this.trtcCalling.groupCall({\n          userIDList: this.callingInfo.memberList,\n          type: this.callType,\n          groupID: this.currentConversation.groupProfile.groupID,\n          timeout: 30\n        }).then(function (res) {\n          _this12.changeState('dialling', true);\n\n          res.data.message.nick = _this12.currentUserProfile.nick;\n\n          _this12.$store.commit('pushCurrentMessageList', res.data.message);\n        });\n      }\n    },\n    leave: function leave() {\n      var _this13 = this;\n\n      // 离开房间，发起方挂断\n      this.isMicOn = true;\n      this.isCamOn = true;\n      this.maskShow = false;\n      this.isStartLocalView = false;\n\n      if (!this.calling) {\n        // 还没有通话，单方面挂断\n        this.trtcCalling.hangup().then(function (res) {\n          res.data.message.nick = _this13.currentUserProfile.nick;\n\n          _this13.$store.commit('pushCurrentMessageList', res.data.message);\n\n          _this13.changeState('dialling', false);\n\n          clearTimeout(_this13.timer);\n        });\n        return;\n      }\n\n      this.hangUp(); // 通话一段时间之后，某一方面结束通话\n    },\n    refuse: function refuse() {\n      // 拒绝电话\n      this.changeState('isDialled', false);\n      this.reject();\n    },\n    resetDuration: function resetDuration(duration) {\n      var _this14 = this;\n\n      this.duration = duration;\n      this.hangUpTimer = setTimeout(function () {\n        var now = new Date();\n\n        _this14.resetDuration(parseInt((now - _this14.start) / 1000));\n      }, 1000);\n    },\n    isAccept: function isAccept() {\n      // 对方接听自己发起的电话\n      clearTimeout(this.timer);\n      this.changeState('calling', true);\n      clearTimeout(this.hangUpTimer);\n      this.resetDuration(0);\n      this.start = new Date();\n    },\n    hangUp: function hangUp() {\n      // 通话一段时间之后，某一方挂断电话\n      this.changeState('calling', false);\n      this.trtcCalling.hangup();\n      this.$store.commit('showMessage', {\n        message: '已挂断'\n      });\n    },\n    videoHandler: function videoHandler() {\n      // 是否打开摄像头\n      if (this.isCamOn) {\n        this.isCamOn = false;\n        this.maskShow = true;\n        this.trtcCalling.closeCamera();\n      } else {\n        this.isCamOn = true;\n        this.maskShow = false;\n        this.trtcCalling.openCamera();\n      }\n    },\n    micHandler: function micHandler() {\n      // 是否打开麦克风\n      if (this.isMicOn) {\n        this.trtcCalling.setMicMute(true);\n        this.isMicOn = false;\n      } else {\n        this.trtcCalling.setMicMute(false);\n        this.isMicOn = true;\n      }\n    },\n    changeMainVideo: function changeMainVideo() {\n      if (!this.calling) {\n        return;\n      }\n\n      this.isLocalMain = !this.isLocalMain;\n    },\n    sendMessage: function () {\n      var _sendMessage = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(userId, callEnd, callText) {\n        var call_text, messageData, message, customData, _customData;\n\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                call_text = '';\n                userId = Array.isArray(userId) ? userId.join(',') : userId;\n                messageData = {\n                  to: this.toAccount,\n                  from: userId,\n                  conversationType: this.currentConversationType,\n                  payload: {\n                    data: '',\n                    description: '',\n                    extension: ''\n                  }\n                };\n                _context2.next = 5;\n                return this.tim.createCustomMessage(messageData);\n\n              case 5:\n                message = _context2.sent;\n                _context2.t0 = callText;\n                _context2.next = _context2.t0 === this.callingTips.callEnd ? 9 : _context2.t0 === this.callingTips.callTimeout ? 16 : 18;\n                break;\n\n              case 9:\n                if (!(this.currentConversationType === this.TIM.TYPES.CONV_GROUP)) {\n                  _context2.next = 14;\n                  break;\n                }\n\n                call_text = '结束群聊';\n                return _context2.abrupt(\"break\", 20);\n\n              case 14:\n                call_text = callEnd === 0 ? '取消通话' : \"\\u7ED3\\u675F\\u901A\\u8BDD\\uFF0C\\u901A\\u8BDD\\u65F6\\u957F\\uFF1A\".concat(formatDuration(callEnd || this.duration));\n                return _context2.abrupt(\"break\", 20);\n\n              case 16:\n                call_text = '无应答';\n                return _context2.abrupt(\"break\", 20);\n\n              case 18:\n                call_text = '';\n                return _context2.abrupt(\"break\", 20);\n\n              case 20:\n                if (this.currentConversationType === this.TIM.TYPES.CONV_GROUP) {\n                  message.groupID = this.toAccount;\n                  customData = {\n                    operationType: 256,\n                    text: call_text,\n                    userIDList: []\n                  };\n                  message.payload = customData;\n                }\n\n                if (this.currentConversationType === this.TIM.TYPES.CONV_C2C) {\n                  _customData = {\n                    text: call_text\n                  };\n                  message.payload = _customData;\n                }\n\n                if (this.currentConversationType === this.TIM.TYPES.CONV_GROUP) {\n                  message.type = this.TIM.TYPES.MSG_GRP_TIP;\n                }\n\n                message.callType = 'callingTips';\n                this.$store.commit('pushCurrentMessageList', message);\n\n              case 25:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function sendMessage(_x2, _x3, _x4) {\n        return _sendMessage.apply(this, arguments);\n      }\n\n      return sendMessage;\n    }()\n  }\n};",null]}