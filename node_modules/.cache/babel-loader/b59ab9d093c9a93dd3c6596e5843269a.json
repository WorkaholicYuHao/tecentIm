{"remainingRequest":"/Users/yuhao/TIMSDK/H5/node_modules/thread-loader/dist/cjs.js!/Users/yuhao/TIMSDK/H5/node_modules/babel-loader/lib/index.js!/Users/yuhao/TIMSDK/H5/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/yuhao/TIMSDK/H5/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yuhao/TIMSDK/H5/src/components/conversation/conversation-item.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yuhao/TIMSDK/H5/src/components/conversation/conversation-item.vue","mtime":1616982605596},{"path":"/Users/yuhao/TIMSDK/H5/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yuhao/TIMSDK/H5/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yuhao/TIMSDK/H5/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/yuhao/TIMSDK/H5/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yuhao/TIMSDK/H5/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _defineProperty from \"/Users/yuhao/TIMSDK/H5/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapGetters, mapState } from 'vuex';\nimport { isToday, getDate, getTime } from \"../../utils/date\";\nexport default {\n  name: 'conversation-item',\n  props: ['conversation'],\n  data: function data() {\n    return {\n      popoverVisible: false,\n      showMessageAtMe_text: ''\n    };\n  },\n  computed: _objectSpread(_objectSpread({\n    hasMessageAtMe: function hasMessageAtMe() {\n      return this.currentConversation.conversationID !== this.conversation.conversationID && this.conversation.groupAtInfoList && this.conversation.groupAtInfoList.length > 0;\n    },\n    messageAtMeText: function messageAtMeText() {\n      var _this = this;\n\n      var text = '';\n\n      if (this.conversation.groupAtInfoList.length > 0) {\n        this.conversation.groupAtInfoList.forEach(function (item) {\n          if (item.atTypeArray[0] === _this.TIM.TYPES.CONV_AT_ME) {\n            text.indexOf('[@所有人]') !== -1 ? text = '[@所有人][有人@我]' : text = '[有人@我]';\n          }\n\n          if (item.atTypeArray[0] === _this.TIM.TYPES.CONV_AT_ALL) {\n            text.indexOf('[有人@我]') !== -1 ? text = '[有人@我][@所有人]' : text = '[@所有人]';\n          }\n\n          if (item.atTypeArray[0] === _this.TIM.TYPES.CONV_AT_ALL_AT_ME) {\n            text = '[@所有人][有人@我]';\n          }\n        });\n      }\n\n      return text;\n    },\n    showUnreadCount: function showUnreadCount() {\n      if (this.$store.getters.hidden) {\n        return this.conversation.unreadCount > 0;\n      } // 是否显示未读计数。当前会话和未读计数为0的会话，不显示。\n\n\n      return this.currentConversation.conversationID !== this.conversation.conversationID && this.conversation.unreadCount > 0;\n    },\n    date: function date() {\n      if (!this.conversation.lastMessage || !this.conversation.lastMessage.lastTime) {\n        return '';\n      }\n\n      var date = new Date(this.conversation.lastMessage.lastTime * 1000);\n\n      if (isToday(date)) {\n        return getTime(date);\n      }\n\n      return getDate(date);\n    },\n    avatar: function avatar() {\n      switch (this.conversation.type) {\n        case 'GROUP':\n          return this.conversation.groupProfile.avatar;\n\n        case 'C2C':\n          return this.conversation.userProfile.avatar;\n\n        default:\n          return '';\n      }\n    },\n    conversationName: function conversationName() {\n      if (this.conversation.type === this.TIM.TYPES.CONV_C2C) {\n        return this.conversation.userProfile.nick || this.conversation.userProfile.userID;\n      }\n\n      if (this.conversation.type === this.TIM.TYPES.CONV_GROUP) {\n        return this.conversation.groupProfile.name || this.conversation.groupProfile.groupID;\n      }\n\n      if (this.conversation.type === this.TIM.TYPES.CONV_SYSTEM) {\n        return '系统通知';\n      }\n\n      return '';\n    },\n    showGrayBadge: function showGrayBadge() {\n      if (this.conversation.type !== this.TIM.TYPES.CONV_GROUP) {\n        return false;\n      }\n\n      return this.conversation.groupProfile.selfInfo.messageRemindType === 'AcceptNotNotify';\n    },\n    messageForShow: function messageForShow() {\n      if (this.conversation.lastMessage.isRevoked) {\n        if (this.conversation.lastMessage.fromAccount === this.currentUserProfile.userID) {\n          return '你撤回了一条消息';\n        }\n\n        if (this.conversation.type === this.TIM.TYPES.CONV_C2C) {\n          return '对方撤回了一条消息';\n        }\n\n        return \"\".concat(this.conversation.lastMessage.fromAccount, \"\\u64A4\\u56DE\\u4E86\\u4E00\\u6761\\u6D88\\u606F\");\n      }\n\n      return this.conversation.lastMessage.messageForShow;\n    }\n  }, mapState({\n    currentConversation: function currentConversation(state) {\n      return state.conversation.currentConversation;\n    },\n    currentUserProfile: function currentUserProfile(state) {\n      return state.user.currentUserProfile;\n    }\n  })), mapGetters(['toAccount'])),\n  mounted: function mounted() {},\n  methods: {\n    selectConversation: function selectConversation() {\n      if (this.conversation.conversationID !== this.currentConversation.conversationID) {\n        this.$store.dispatch('checkoutConversation', this.conversation.conversationID);\n      }\n    },\n    deleteConversation: function deleteConversation(event) {\n      var _this2 = this;\n\n      // 停止冒泡，避免和点击会话的事件冲突\n      event.stopPropagation();\n      this.tim.deleteConversation(this.conversation.conversationID).then(function () {\n        _this2.$store.commit('showMessage', {\n          message: \"\\u4F1A\\u8BDD\\u3010\".concat(_this2.conversationName, \"\\u3011\\u5220\\u9664\\u6210\\u529F!\"),\n          type: 'success'\n        });\n\n        _this2.popoverVisible = false;\n\n        _this2.$store.commit('resetCurrentConversation');\n      }).catch(function (error) {\n        _this2.$store.commit('showMessage', {\n          message: \"\\u4F1A\\u8BDD\\u3010\".concat(_this2.conversationName, \"\\u3011\\u5220\\u9664\\u5931\\u8D25!, error=\").concat(error.message),\n          type: 'error'\n        });\n\n        _this2.popoverVisible = false;\n      });\n    },\n    showContextMenu: function showContextMenu() {\n      this.popoverVisible = true;\n    }\n  }\n};",null]}