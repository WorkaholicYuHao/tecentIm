{"remainingRequest":"/Users/yuhao/TIMSDK/H5/node_modules/thread-loader/dist/cjs.js!/Users/yuhao/TIMSDK/H5/node_modules/babel-loader/lib/index.js!/Users/yuhao/TIMSDK/H5/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/yuhao/TIMSDK/H5/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yuhao/TIMSDK/H5/src/components/message/message-group-live-status.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yuhao/TIMSDK/H5/src/components/message/message-group-live-status.vue","mtime":1616982605604},{"path":"/Users/yuhao/TIMSDK/H5/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yuhao/TIMSDK/H5/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yuhao/TIMSDK/H5/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/yuhao/TIMSDK/H5/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yuhao/TIMSDK/H5/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.string.includes\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/yuhao/TIMSDK/H5/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport \"core-js/modules/es6.number.constructor\";\nimport _defineProperty from \"/Users/yuhao/TIMSDK/H5/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapState } from 'vuex';\nimport axios from 'axios';\nexport default {\n  name: 'MessageGroupLiveStatus',\n  props: {\n    liveInfo: {\n      type: Object,\n      required: true\n    }\n  },\n  computed: _objectSpread(_objectSpread({}, mapState({\n    userID: function userID(state) {\n      return state.user.userID;\n    }\n  })), {}, {\n    cardTitle: function cardTitle() {\n      return \"\".concat(this.liveInfo.anchorName || this.liveInfo.anchorId, \"\\u7684\\u76F4\\u64AD\");\n    },\n    cardContent: function cardContent() {\n      return Number(this.liveInfo.roomStatus) === 1 ? '正在直播' : '结束直播';\n    },\n    roomCover: function roomCover() {\n      return this.liveInfo.roomCover || 'https://imgcache.qq.com/open/qcloud/video/act/webim-avatar/avatar-2.png';\n    }\n  }),\n  methods: {\n    handleClick: function () {\n      var _handleClick = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var isExisting, _this$liveInfo, roomID, anchorID, roomName;\n\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.checkRoomExist();\n\n              case 2:\n                isExisting = _context.sent;\n                _this$liveInfo = this.liveInfo, roomID = _this$liveInfo.roomId, anchorID = _this$liveInfo.anchorId, roomName = _this$liveInfo.roomName;\n\n                if (isExisting) {\n                  _context.next = 7;\n                  break;\n                }\n\n                this.$store.commit('showMessage', {\n                  message: '直播已结束',\n                  type: 'info'\n                });\n                return _context.abrupt(\"return\");\n\n              case 7:\n                if (!(anchorID === this.userID)) {\n                  _context.next = 10;\n                  break;\n                }\n\n                this.$store.commit('showMessage', {\n                  message: '您正在其它终端或者Web实例上开播，请勿重复开播！',\n                  type: 'info'\n                });\n                return _context.abrupt(\"return\");\n\n              case 10:\n                this.$store.commit('updateGroupLiveInfo', {\n                  groupID: this.toAccount,\n                  roomID: roomID,\n                  anchorID: anchorID,\n                  roomName: roomName\n                });\n                this.$bus.$emit('open-group-live', {\n                  channel: 3\n                });\n\n              case 12:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function handleClick() {\n        return _handleClick.apply(this, arguments);\n      }\n\n      return handleClick;\n    }(),\n    // 检查房间是否存在\n    checkRoomExist: function () {\n      var _checkRoomExist = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n        var checkRes, list, roomIDList;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return axios('https://service-c2zjvuxa-1252463788.gz.apigw.tencentcs.com/release/forTest?method=getRoomList&appId=1400187352&type=groupLive');\n\n              case 2:\n                checkRes = _context2.sent;\n                list = checkRes.data && checkRes.data.data || [];\n                roomIDList = [];\n                list.forEach(function (item) {\n                  roomIDList.push(item.roomId);\n                });\n                return _context2.abrupt(\"return\", roomIDList.includes(this.liveInfo.roomId));\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function checkRoomExist() {\n        return _checkRoomExist.apply(this, arguments);\n      }\n\n      return checkRoomExist;\n    }()\n  }\n};",null]}