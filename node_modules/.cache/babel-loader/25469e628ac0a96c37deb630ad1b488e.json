{"remainingRequest":"/Users/yuhao/TIMSDK/H5/node_modules/thread-loader/dist/cjs.js!/Users/yuhao/TIMSDK/H5/node_modules/babel-loader/lib/index.js!/Users/yuhao/TIMSDK/H5/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/yuhao/TIMSDK/H5/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yuhao/TIMSDK/H5/src/components/message/message-send-box.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yuhao/TIMSDK/H5/src/components/message/message-send-box.vue","mtime":1616982605605},{"path":"/Users/yuhao/TIMSDK/H5/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yuhao/TIMSDK/H5/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yuhao/TIMSDK/H5/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/yuhao/TIMSDK/H5/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yuhao/TIMSDK/H5/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.array.find-index\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _defineProperty from \"/Users/yuhao/TIMSDK/H5/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _Rate2 from \"element-ui/lib/theme-chalk/rate.css\";\nimport \"element-ui/lib/theme-chalk/base.css\";\nimport _Rate from \"element-ui/lib/rate\";\nimport _Tooltip2 from \"element-ui/lib/theme-chalk/tooltip.css\";\nimport \"element-ui/lib/theme-chalk/base.css\";\nimport _Tooltip from \"element-ui/lib/tooltip\";\nimport _Popover2 from \"element-ui/lib/theme-chalk/popover.css\";\nimport \"element-ui/lib/theme-chalk/base.css\";\nimport _Popover from \"element-ui/lib/popover\";\nimport _Dialog2 from \"element-ui/lib/theme-chalk/dialog.css\";\nimport \"element-ui/lib/theme-chalk/base.css\";\nimport _Dialog from \"element-ui/lib/dialog\";\nimport _FormItem2 from \"element-ui/lib/theme-chalk/form-item.css\";\nimport \"element-ui/lib/theme-chalk/base.css\";\nimport _FormItem from \"element-ui/lib/form-item\";\nimport _Form2 from \"element-ui/lib/theme-chalk/form.css\";\nimport \"element-ui/lib/theme-chalk/base.css\";\nimport _Form from \"element-ui/lib/form\";\nimport _Input2 from \"element-ui/lib/theme-chalk/input.css\";\nimport \"element-ui/lib/theme-chalk/base.css\";\nimport _Input from \"element-ui/lib/input\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapGetters, mapState } from 'vuex';\nimport callingMemberList from \"./trtc-calling/group-member-list\";\nimport { emojiMap, emojiName, emojiUrl } from \"../../utils/emojiMap\";\nexport default {\n  name: 'message-send-box',\n  props: ['scrollMessageListToButtom'],\n  components: {\n    callingMemberList: callingMemberList,\n    ElInput: _Input,\n    ElForm: _Form,\n    ElFormItem: _FormItem,\n    ElDialog: _Dialog,\n    ElPopover: _Popover,\n    ElTooltip: _Tooltip,\n    ElRate: _Rate\n  },\n  data: function data() {\n    return {\n      callingList: [],\n      groupAtList: [],\n      listTpye: '',\n      callingType: '',\n      groupAt: false,\n      showCallingMember: false,\n      colors: ['#99A9BF', '#F7BA2A', '#FF9900'],\n      messageContent: '',\n      isSendCustomMessage: false,\n      sendCustomDialogVisible: false,\n      surveyDialogVisible: false,\n      form: {\n        data: '',\n        description: '',\n        extension: ''\n      },\n      rate: 5,\n      // 评分\n      suggestion: '',\n      // 建议\n      file: '',\n      emojiMap: emojiMap,\n      emojiName: emojiName,\n      emojiUrl: emojiUrl,\n      showAtGroupMember: false,\n      atUserID: '',\n      focus: false\n    };\n  },\n  computed: _objectSpread(_objectSpread({}, mapGetters(['toAccount', 'currentConversationType'])), mapState({\n    memberList: function memberList(state) {\n      return state.group.currentMemberList;\n    },\n    userID: function userID(state) {\n      return state.user.userID;\n    },\n    groupProfile: function groupProfile(state) {\n      return state.conversation.currentConversation.groupProfile;\n    }\n  })),\n  mounted: function mounted() {\n    this.$refs['text-input'].addEventListener('paste', this.handlePaste);\n    this.$bus.$on('reEditMessage', this.reEditMessage);\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.$refs['text-input'].removeEventListener('paste', this.handlePaste);\n  },\n  methods: {\n    getList: function getList(value) {\n      this.callingList = value.map(function (item) {\n        var obj = JSON.parse(item);\n        return obj.userID;\n      });\n      this.groupAtList = value.map(function (item) {\n        var data = JSON.parse(item);\n        return data.nick;\n      });\n    },\n    cancelCalling: function cancelCalling() {\n      this.showCallingMember = false;\n    },\n    callingHandler: function callingHandler() {\n      var _this = this;\n\n      if (this.callingList.length < 1) {\n        this.$store.commit('showMessage', {\n          type: 'warning',\n          message: '请选择成员'\n        });\n        return;\n      }\n\n      if (this.listTpye === 'groupAt') {\n        this.groupAtList.forEach(function (item, index) {\n          if (index === 0) {\n            _this.messageContent += \"\".concat(item, \" \");\n          } else {\n            _this.messageContent += \"@\".concat(item, \" \");\n          }\n        });\n        this.showCallingMember = false;\n        this.$refs['text-input'].focus();\n        return;\n      }\n\n      if (this.listTpye === 'calling') {\n        var callingData = {\n          memberList: this.callingList,\n          type: this.TIM.TYPES.CONV_GROUP\n        };\n        this.$store.commit('setCallingList', callingData);\n\n        if (this.callingType === 'video') {\n          this.$bus.$emit('video-call');\n        }\n\n        if (this.callingType === 'audio') {\n          this.$bus.$emit('audio-call');\n        }\n\n        this.showCallingMember = false;\n      }\n    },\n    trtcCalling: function trtcCalling(type) {\n      this.listTpye = 'calling';\n\n      if (type === 'video') {\n        this.callingType = 'video';\n      }\n\n      if (type === 'audio') {\n        this.callingType = 'audio';\n      } // 呼叫方设置\n\n\n      if (this.currentConversationType === 'C2C') {\n        var member = [this.toAccount];\n        var callingData = {\n          memberList: member,\n          type: 'C2C'\n        };\n        this.$store.commit('setCallingList', callingData);\n        this.$bus.$emit(\"\".concat(type, \"-call\"));\n        return;\n      }\n\n      if (this.currentConversationType === this.TIM.TYPES.CONV_GROUP) {\n        this.showCallingMember = true;\n      } // this.$store.commit('pushCurrentMessageList', true)\n\n    },\n    handleEmojiShow: function handleEmojiShow() {\n      this.emojiShow = true;\n      this.bigEmojiShow = false;\n    },\n    handleBigEmojiShow: function handleBigEmojiShow(index) {\n      var elm = document.getElementById('bigEmojiBox');\n      elm && (elm.scrollTop = 0);\n      this.curItemIndex = index;\n      this.curBigEmojiItemList = this.bigEmojiList[index].list;\n      this.emojiShow = false;\n      this.bigEmojiShow = true;\n    },\n    chooseBigEmoji: function chooseBigEmoji(item) {\n      var _this2 = this;\n\n      this.popoverVisible = false;\n      var message = this.tim.createFaceMessage({\n        to: this.toAccount,\n        conversationType: this.currentConversationType,\n        payload: {\n          index: this.curItemIndex + 1,\n          data: \"\".concat(item, \"@2x\")\n        }\n      });\n      this.$store.commit('pushCurrentMessageList', message);\n      this.$bus.$emit('scroll-bottom');\n      this.tim.sendMessage(message).catch(function (error) {\n        _this2.$store.commit('showMessage', {\n          type: 'error',\n          message: error.message\n        });\n      });\n    },\n    reEditMessage: function reEditMessage(payload) {\n      this.messageContent = payload;\n    },\n    handleUp: function handleUp() {\n      var _this3 = this;\n\n      var index = this.memberList.findIndex(function (member) {\n        return member.userID === _this3.atUserID;\n      });\n\n      if (index - 1 < 0) {\n        return;\n      }\n\n      this.atUserID = this.memberList[index - 1].userID;\n    },\n    handleDown: function handleDown() {\n      var _this4 = this;\n\n      var index = this.memberList.findIndex(function (member) {\n        return member.userID === _this4.atUserID;\n      });\n\n      if (index + 1 >= this.memberList.length) {\n        return;\n      }\n\n      this.atUserID = this.memberList[index + 1].userID;\n    },\n    handleEnter: function handleEnter() {\n      this.sendTextMessage();\n    },\n    inputChange: function inputChange(value) {\n      if (this.currentConversationType === this.TIM.TYPES.CONV_GROUP && value.data === '@') {\n        this.groupAt = true;\n        this.listTpye = 'groupAt';\n        this.showCallingMember = true;\n      }\n\n      if (value.data === ' ' && this.messageContent.indexOf('@ ') !== -1) {\n        this.groupAt = false;\n        this.listTpye = '';\n        this.showCallingMember = false;\n      }\n    },\n    handleLine: function handleLine() {\n      this.messageContent += '\\n';\n    },\n    handlePaste: function handlePaste(e) {\n      var _this5 = this;\n\n      var clipboardData = e.clipboardData;\n      var file;\n\n      if (clipboardData && clipboardData.files && clipboardData.files.length > 0) {\n        file = clipboardData.files[0];\n      }\n\n      if (typeof file === 'undefined') {\n        return;\n      } // 1. 创建消息实例，接口返回的实例可以上屏\n\n\n      var message = this.tim.createImageMessage({\n        to: this.toAccount,\n        conversationType: this.currentConversationType,\n        payload: {\n          file: file\n        },\n        onProgress: function onProgress(percent) {\n          _this5.$set(message, 'progress', percent); // 手动给message 实例加个响应式属性: progress\n\n        }\n      });\n      this.$store.commit('pushCurrentMessageList', message); // 2. 发送消息\n\n      var promise = this.tim.sendMessage(message);\n      promise.catch(function (error) {\n        _this5.$store.commit('showMessage', {\n          type: 'error',\n          message: error.message\n        });\n      });\n    },\n    dropHandler: function dropHandler(e) {\n      var _this6 = this;\n\n      e.preventDefault();\n      var file = e.dataTransfer.files[0];\n      var message = {};\n\n      if (file.type === 'video/mp4') {\n        message = this.tim.createVideoMessage({\n          to: this.toAccount,\n          conversationType: this.currentConversationType,\n          payload: {\n            file: file\n          },\n          onProgress: function onProgress(percent) {\n            _this6.$set(message, 'progress', percent); // 手动给message 实例加个响应式属性: progress\n\n          }\n        });\n      } else {\n        message = this.tim.createFileMessage({\n          to: this.toAccount,\n          conversationType: this.currentConversationType,\n          payload: {\n            file: file\n          },\n          onProgress: function onProgress(percent) {\n            _this6.$set(message, 'progress', percent); // 手动给message 实例加个响应式属性: progress\n\n          }\n        });\n      }\n\n      this.$store.commit('pushCurrentMessageList', message);\n      this.tim.sendMessage(message).then(function () {\n        _this6.$refs.videoPicker.value = null;\n      }).catch(function (imError) {\n        _this6.$store.commit('showMessage', {\n          message: imError.message,\n          type: 'error'\n        });\n      });\n    },\n    sendTextMessage: function sendTextMessage() {\n      var _this7 = this;\n\n      if (this.messageContent === '' || this.messageContent.trim().length === 0) {\n        this.messageContent = '';\n        this.$store.commit('showMessage', {\n          message: '不能发送空消息哦！',\n          type: 'info'\n        });\n        return;\n      }\n\n      if (this.currentConversationType === this.TIM.TYPES.CONV_GROUP && this.groupAt) {\n        var _message = this.tim.createTextAtMessage({\n          to: this.toAccount,\n          conversationType: this.TIM.TYPES.CONV_GROUP,\n          payload: {\n            text: this.messageContent,\n            atUserList: this.callingList // 'denny' 'lucy' 都是 userID，而非昵称\n\n          }\n        });\n\n        this.$store.commit('pushCurrentMessageList', _message);\n        this.$bus.$emit('scroll-bottom');\n        this.tim.sendMessage(_message).catch(function (error) {\n          _this7.$store.commit('showMessage', {\n            type: 'error',\n            message: error.message\n          });\n        });\n        this.messageContent = '';\n        this.groupAt = false;\n        return;\n      }\n\n      var message = this.tim.createTextMessage({\n        to: this.toAccount,\n        conversationType: this.currentConversationType,\n        payload: {\n          text: this.messageContent\n        }\n      });\n      this.$store.commit('pushCurrentMessageList', message);\n      this.$bus.$emit('scroll-bottom');\n      this.tim.sendMessage(message).catch(function (error) {\n        _this7.$store.commit('showMessage', {\n          type: 'error',\n          message: error.message\n        });\n      });\n      this.messageContent = '';\n    },\n    sendCustomMessage: function sendCustomMessage() {\n      var _this8 = this;\n\n      if (this.form.data.length === 0 && this.form.description.length === 0 && this.form.extension.length === 0) {\n        this.$store.commit('showMessage', {\n          message: '不能发送空消息',\n          type: 'info'\n        });\n        return;\n      }\n\n      var message = this.tim.createCustomMessage({\n        to: this.toAccount,\n        conversationType: this.currentConversationType,\n        payload: {\n          data: this.form.data,\n          description: this.form.description,\n          extension: this.form.extension\n        }\n      });\n      this.$store.commit('pushCurrentMessageList', message);\n      this.tim.sendMessage(message).catch(function (error) {\n        _this8.$store.commit('showMessage', {\n          type: 'error',\n          message: error.message\n        });\n      });\n      Object.assign(this.form, {\n        data: '',\n        description: '',\n        extension: ''\n      });\n      this.sendCustomDialogVisible = false;\n    },\n    random: function random(min, max) {\n      return Math.floor(Math.random() * (max - min + 1) + min);\n    },\n    sendSurvey: function sendSurvey() {\n      var _this9 = this;\n\n      var message = this.tim.createCustomMessage({\n        to: this.toAccount,\n        conversationType: this.currentConversationType,\n        payload: {\n          data: 'survey',\n          description: String(this.rate),\n          extension: this.suggestion\n        }\n      });\n      this.$store.commit('pushCurrentMessageList', message);\n      Object.assign(this.form, {\n        data: '',\n        description: '',\n        extension: ''\n      });\n      this.tim.sendMessage(message).then(function () {\n        Object.assign(_this9, {\n          rate: 5,\n          suggestion: ''\n        });\n      }).catch(function (error) {\n        _this9.$store.commit('showMessage', {\n          type: 'error',\n          message: error.message\n        });\n      });\n      this.surveyDialogVisible = false;\n    },\n    chooseEmoji: function chooseEmoji(item) {\n      this.messageContent += item;\n    },\n    handleSendImageClick: function handleSendImageClick() {\n      this.$refs.imagePicker.click();\n    },\n    handleSendFileClick: function handleSendFileClick() {\n      this.$refs.filePicker.click();\n    },\n    handleSendVideoClick: function handleSendVideoClick() {\n      this.$refs.videoPicker.click();\n    },\n    groupLive: function groupLive() {\n      this.$store.commit('updateGroupLiveInfo', {\n        groupID: this.toAccount,\n        anchorID: this.userID\n      });\n      this.$bus.$emit('open-group-live', {\n        channel: 1\n      });\n    },\n    sendImage: function sendImage() {\n      var _this10 = this;\n\n      var message = this.tim.createImageMessage({\n        to: this.toAccount,\n        conversationType: this.currentConversationType,\n        payload: {\n          file: document.getElementById('imagePicker') // 或者用event.target\n\n        },\n        onProgress: function onProgress(percent) {\n          _this10.$set(message, 'progress', percent); // 手动给message 实例加个响应式属性: progress\n\n        }\n      });\n      this.$store.commit('pushCurrentMessageList', message);\n      this.tim.sendMessage(message).then(function () {\n        _this10.$refs.imagePicker.value = null;\n      }).catch(function (imError) {\n        _this10.$store.commit('showMessage', {\n          message: imError.message,\n          type: 'error'\n        });\n      });\n    },\n    sendFile: function sendFile() {\n      var _this11 = this;\n\n      var message = this.tim.createFileMessage({\n        to: this.toAccount,\n        conversationType: this.currentConversationType,\n        payload: {\n          file: document.getElementById('filePicker') // 或者用event.target\n\n        },\n        onProgress: function onProgress(percent) {\n          _this11.$set(message, 'progress', percent); // 手动给message 实例加个响应式属性: progress\n\n        }\n      });\n      this.$store.commit('pushCurrentMessageList', message);\n      this.tim.sendMessage(message).then(function () {\n        _this11.$refs.filePicker.value = null;\n      }).catch(function (imError) {\n        _this11.$store.commit('showMessage', {\n          message: imError.message,\n          type: 'error'\n        });\n      });\n    },\n    sendVideo: function sendVideo() {\n      var _this12 = this;\n\n      var message = this.tim.createVideoMessage({\n        to: this.toAccount,\n        conversationType: this.currentConversationType,\n        payload: {\n          file: document.getElementById('videoPicker') // 或者用event.target\n\n        },\n        onProgress: function onProgress(percent) {\n          _this12.$set(message, 'progress', percent); // 手动给message 实例加个响应式属性: progress\n\n        }\n      });\n      this.$store.commit('pushCurrentMessageList', message);\n      this.tim.sendMessage(message).then(function () {\n        _this12.$refs.videoPicker.value = null;\n      }).catch(function (imError) {\n        _this12.$store.commit('showMessage', {\n          message: imError.message,\n          type: 'error'\n        });\n      });\n    }\n  }\n};",null]}