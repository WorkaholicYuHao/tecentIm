{"remainingRequest":"/Users/yuhao/TIMSDK/H5/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yuhao/TIMSDK/H5/src/components/message/message-send-box.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yuhao/TIMSDK/H5/src/components/message/message-send-box.vue","mtime":1616982605605},{"path":"/Users/yuhao/TIMSDK/H5/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yuhao/TIMSDK/H5/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yuhao/TIMSDK/H5/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/yuhao/TIMSDK/H5/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yuhao/TIMSDK/H5/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { mapGetters, mapState } from 'vuex'\nimport callingMemberList from './trtc-calling/group-member-list'\nimport {\n  Form,\n  FormItem,\n  Input,\n  Dialog,\n  Popover,\n  Tooltip,\n  Rate\n} from 'element-ui'\nimport { emojiMap, emojiName, emojiUrl } from '../../utils/emojiMap'\n\nexport default {\n  name: 'message-send-box',\n  props: ['scrollMessageListToButtom'],\n  components: {\n    callingMemberList: callingMemberList,\n    ElInput: Input,\n    ElForm: Form,\n    ElFormItem: FormItem,\n    ElDialog: Dialog,\n    ElPopover: Popover,\n    ElTooltip: Tooltip,\n    ElRate: Rate\n  },\n  data() {\n    return {\n      callingList: [],\n      groupAtList: [],\n      listTpye:'',\n      callingType: '',\n      groupAt:false,\n      showCallingMember: false,\n      colors: ['#99A9BF', '#F7BA2A', '#FF9900'],\n      messageContent: '',\n      isSendCustomMessage: false,\n      sendCustomDialogVisible: false,\n      surveyDialogVisible: false,\n      form: {\n        data: '',\n        description: '',\n        extension: ''\n      },\n      rate: 5, // 评分\n      suggestion: '', // 建议\n      file: '',\n      emojiMap: emojiMap,\n      emojiName: emojiName,\n      emojiUrl: emojiUrl,\n      showAtGroupMember: false,\n      atUserID: '',\n      focus: false\n    }\n  },\n  computed: {\n    ...mapGetters(['toAccount', 'currentConversationType']),\n    ...mapState({\n      memberList: state => state.group.currentMemberList,\n      userID: state => state.user.userID,\n      groupProfile: state => state.conversation.currentConversation.groupProfile\n    })\n  },\n  mounted() {\n    this.$refs['text-input'].addEventListener('paste', this.handlePaste)\n    this.$bus.$on('reEditMessage', this.reEditMessage)\n  },\n  beforeDestroy() {\n    this.$refs['text-input'].removeEventListener('paste', this.handlePaste)\n  },\n  methods: {\n    getList(value) {\n      this.callingList = value.map((item) => {\n        let obj = JSON.parse(item)\n        return obj.userID\n      })\n      this.groupAtList = value.map((item) => {\n        let data = JSON.parse(item)\n        return data.nick\n      })\n    },\n    cancelCalling() {\n      this.showCallingMember = false\n    },\n    callingHandler() {\n      if (this.callingList.length < 1) {\n        this.$store.commit('showMessage', {\n          type: 'warning',\n          message: '请选择成员'\n        })\n        return\n      }\n      if (this.listTpye === 'groupAt') {\n        this.groupAtList.forEach((item, index) => {\n          if(index===0) {\n            this.messageContent += `${item} `\n          }else{\n            this.messageContent += `@${item} `\n          }\n        })\n        this.showCallingMember = false\n        this.$refs['text-input'].focus()\n        return\n      }\n      if (this.listTpye === 'calling') {\n        let callingData = {\n          memberList:this.callingList,\n          type:this.TIM.TYPES.CONV_GROUP\n        }\n        this.$store.commit('setCallingList',callingData)\n        if (this.callingType === 'video') {\n          this.$bus.$emit('video-call')\n        }\n        if (this.callingType === 'audio') {\n          this.$bus.$emit('audio-call')\n        }\n        this.showCallingMember = false\n      }\n\n    },\n    trtcCalling(type) {\n      this.listTpye = 'calling'\n      if (type === 'video') {\n        this.callingType = 'video'\n      }\n      if (type === 'audio') {\n        this.callingType = 'audio'\n      }\n      // 呼叫方设置\n      if(this.currentConversationType === 'C2C') {\n        let member = [this.toAccount]\n        let callingData = {\n          memberList:member,\n          type:'C2C'\n        }\n        this.$store.commit('setCallingList',callingData)\n        this.$bus.$emit(`${type}-call`)\n        return\n      }\n      if(this.currentConversationType === this.TIM.TYPES.CONV_GROUP) {\n        this.showCallingMember = true\n      }\n      // this.$store.commit('pushCurrentMessageList', true)\n    },\n    handleEmojiShow () {\n      this.emojiShow = true\n      this.bigEmojiShow = false\n    },\n    handleBigEmojiShow(index) {\n      let elm = document.getElementById('bigEmojiBox')\n      elm && (elm.scrollTop = 0)\n      this.curItemIndex = index\n      this.curBigEmojiItemList = this.bigEmojiList[index].list\n      this.emojiShow = false\n      this.bigEmojiShow = true\n    },\n    chooseBigEmoji(item) {\n      this.popoverVisible = false\n      let message = this.tim.createFaceMessage({\n        to: this.toAccount,\n        conversationType: this.currentConversationType,\n        payload: {\n          index: this.curItemIndex + 1,\n          data: `${item}@2x`\n        }\n      })\n      this.$store.commit('pushCurrentMessageList', message)\n      this.$bus.$emit('scroll-bottom')\n      this.tim.sendMessage(message).catch(error => {\n        this.$store.commit('showMessage', {\n          type: 'error',\n          message: error.message\n        })\n      })\n    },\n    reEditMessage(payload) {\n      this.messageContent = payload\n    },\n    handleUp() {\n      const index = this.memberList.findIndex(\n        member => member.userID === this.atUserID\n      )\n      if (index - 1 < 0) {\n        return\n      }\n      this.atUserID = this.memberList[index - 1].userID\n    },\n    handleDown() {\n      const index = this.memberList.findIndex(\n        member => member.userID === this.atUserID\n      )\n      if (index + 1 >= this.memberList.length) {\n        return\n      }\n      this.atUserID = this.memberList[index + 1].userID\n    },\n    handleEnter() {\n      this.sendTextMessage()\n    },\n    inputChange(value) {\n      if (this.currentConversationType === this.TIM.TYPES.CONV_GROUP && value.data === '@') {\n        this.groupAt = true\n        this.listTpye = 'groupAt'\n        this.showCallingMember = true\n      }\n      if (value.data === ' ' && this.messageContent.indexOf('@ ') !== -1) {\n        this.groupAt = false\n        this.listTpye = ''\n        this.showCallingMember = false\n      }\n    },\n    handleLine() {\n      this.messageContent += '\\n'\n    },\n    handlePaste(e) {\n      let clipboardData = e.clipboardData\n      let file\n      if (\n        clipboardData &&\n        clipboardData.files &&\n        clipboardData.files.length > 0\n      ) {\n        file = clipboardData.files[0]\n      }\n\n      if (typeof file === 'undefined') {\n        return\n      }\n      // 1. 创建消息实例，接口返回的实例可以上屏\n      let message = this.tim.createImageMessage({\n        to: this.toAccount,\n        conversationType: this.currentConversationType,\n        payload: {\n          file: file\n        },\n        onProgress: percent => {\n          this.$set(message, 'progress', percent) // 手动给message 实例加个响应式属性: progress\n        }\n      })\n      this.$store.commit('pushCurrentMessageList', message)\n\n      // 2. 发送消息\n      let promise = this.tim.sendMessage(message)\n      promise.catch(error => {\n        this.$store.commit('showMessage', {\n          type: 'error',\n          message: error.message\n        })\n      })\n    },\n    dropHandler(e) {\n      e.preventDefault()\n      let file = e.dataTransfer.files[0]\n      let message = {}\n      if (file.type === 'video/mp4') {\n        message = this.tim.createVideoMessage({\n          to: this.toAccount,\n          conversationType: this.currentConversationType,\n          payload: {\n            file: file\n          },\n          onProgress: percent => {\n            this.$set(message, 'progress', percent) // 手动给message 实例加个响应式属性: progress\n          }\n        })\n      } else {\n        message = this.tim.createFileMessage({\n          to: this.toAccount,\n          conversationType: this.currentConversationType,\n          payload: {\n            file: file\n          },\n          onProgress: percent => {\n            this.$set(message, 'progress', percent) // 手动给message 实例加个响应式属性: progress\n          }\n        })\n      }\n      this.$store.commit('pushCurrentMessageList', message)\n      this.tim\n        .sendMessage(message)\n        .then(() => {\n          this.$refs.videoPicker.value = null\n        })\n        .catch(imError => {\n          this.$store.commit('showMessage', {\n            message: imError.message,\n            type: 'error'\n          })\n        })\n    },\n    sendTextMessage() {\n      if (\n        this.messageContent === '' ||\n        this.messageContent.trim().length === 0\n      ) {\n        this.messageContent = ''\n        this.$store.commit('showMessage', {\n          message: '不能发送空消息哦！',\n          type: 'info'\n        })\n        return\n      }\n      if (this.currentConversationType === this.TIM.TYPES.CONV_GROUP && this.groupAt) {\n        let message = this.tim.createTextAtMessage({\n          to: this.toAccount,\n          conversationType: this.TIM.TYPES.CONV_GROUP,\n          payload: {\n            text: this.messageContent,\n            atUserList: this.callingList // 'denny' 'lucy' 都是 userID，而非昵称\n          }\n        })\n        this.$store.commit('pushCurrentMessageList', message)\n        this.$bus.$emit('scroll-bottom')\n        this.tim.sendMessage(message).catch(error => {\n          this.$store.commit('showMessage', {\n            type: 'error',\n            message: error.message\n          })\n        })\n        this.messageContent = ''\n        this.groupAt = false\n        return\n      }\n      const message = this.tim.createTextMessage({\n        to: this.toAccount,\n        conversationType: this.currentConversationType,\n        payload: { text: this.messageContent }\n      })\n      this.$store.commit('pushCurrentMessageList', message)\n      this.$bus.$emit('scroll-bottom')\n      this.tim.sendMessage(message).catch(error => {\n        this.$store.commit('showMessage', {\n          type: 'error',\n          message: error.message\n        })\n      })\n      this.messageContent = ''\n    },\n    sendCustomMessage() {\n      if (\n        this.form.data.length === 0 &&\n        this.form.description.length === 0 &&\n        this.form.extension.length === 0\n      ) {\n        this.$store.commit('showMessage', {\n          message: '不能发送空消息',\n          type: 'info'\n        })\n        return\n      }\n      const message = this.tim.createCustomMessage({\n        to: this.toAccount,\n        conversationType: this.currentConversationType,\n        payload: {\n          data: this.form.data,\n          description: this.form.description,\n          extension: this.form.extension\n        }\n      })\n      this.$store.commit('pushCurrentMessageList', message)\n      this.tim.sendMessage(message).catch(error => {\n        this.$store.commit('showMessage', {\n          type: 'error',\n          message: error.message\n        })\n      })\n      Object.assign(this.form, {\n        data: '',\n        description: '',\n        extension: ''\n      })\n      this.sendCustomDialogVisible = false\n    },\n    random(min, max) {\n      return Math.floor(Math.random() * (max - min + 1) + min)\n    },\n    sendSurvey() {\n      const message = this.tim.createCustomMessage({\n        to: this.toAccount,\n        conversationType: this.currentConversationType,\n        payload: {\n          data: 'survey',\n          description: String(this.rate),\n          extension: this.suggestion\n        }\n      })\n      this.$store.commit('pushCurrentMessageList', message)\n      Object.assign(this.form, {\n        data: '',\n        description: '',\n        extension: ''\n      })\n      this.tim\n        .sendMessage(message)\n        .then(() => {\n          Object.assign(this, {\n            rate: 5,\n            suggestion: ''\n          })\n        })\n        .catch(error => {\n          this.$store.commit('showMessage', {\n            type: 'error',\n            message: error.message\n          })\n        })\n      this.surveyDialogVisible = false\n    },\n    chooseEmoji(item) {\n      this.messageContent += item\n    },\n    handleSendImageClick() {\n      this.$refs.imagePicker.click()\n    },\n    handleSendFileClick() {\n      this.$refs.filePicker.click()\n    },\n    handleSendVideoClick() {\n      this.$refs.videoPicker.click()\n    },\n    groupLive() {\n      this.$store.commit('updateGroupLiveInfo', {\n        groupID: this.toAccount,\n        anchorID: this.userID,\n      })\n      this.$bus.$emit('open-group-live', { channel: 1 })\n    },\n    sendImage() {\n      const message = this.tim.createImageMessage({\n        to: this.toAccount,\n        conversationType: this.currentConversationType,\n        payload: {\n          file: document.getElementById('imagePicker') // 或者用event.target\n        },\n        onProgress: percent => {\n          this.$set(message, 'progress', percent) // 手动给message 实例加个响应式属性: progress\n        }\n      })\n      this.$store.commit('pushCurrentMessageList', message)\n      this.tim\n        .sendMessage(message)\n        .then(() => {\n          this.$refs.imagePicker.value = null\n        })\n        .catch(imError => {\n          this.$store.commit('showMessage', {\n            message: imError.message,\n            type: 'error'\n          })\n        })\n    },\n    sendFile() {\n      const message = this.tim.createFileMessage({\n        to: this.toAccount,\n        conversationType: this.currentConversationType,\n        payload: {\n          file: document.getElementById('filePicker') // 或者用event.target\n        },\n        onProgress: percent => {\n          this.$set(message, 'progress', percent) // 手动给message 实例加个响应式属性: progress\n        }\n      })\n      this.$store.commit('pushCurrentMessageList', message)\n      this.tim\n        .sendMessage(message)\n        .then(() => {\n          this.$refs.filePicker.value = null\n        })\n        .catch(imError => {\n          this.$store.commit('showMessage', {\n            message: imError.message,\n            type: 'error'\n          })\n        })\n    },\n    sendVideo() {\n      const message = this.tim.createVideoMessage({\n        to: this.toAccount,\n        conversationType: this.currentConversationType,\n        payload: {\n          file: document.getElementById('videoPicker') // 或者用event.target\n        },\n        onProgress: percent => {\n          this.$set(message, 'progress', percent) // 手动给message 实例加个响应式属性: progress\n        }\n      })\n      this.$store.commit('pushCurrentMessageList', message)\n      this.tim\n        .sendMessage(message)\n        .then(() => {\n          this.$refs.videoPicker.value = null\n        })\n        .catch(imError => {\n          this.$store.commit('showMessage', {\n            message: imError.message,\n            type: 'error'\n          })\n        })\n    }\n  }\n}\n",null]}