{"remainingRequest":"/Users/yuhao/TIMSDK/H5/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yuhao/TIMSDK/H5/src/components/group-live/components/live-pusher.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yuhao/TIMSDK/H5/src/components/group-live/components/live-pusher.vue","mtime":1616982605600},{"path":"/Users/yuhao/TIMSDK/H5/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yuhao/TIMSDK/H5/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yuhao/TIMSDK/H5/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/yuhao/TIMSDK/H5/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yuhao/TIMSDK/H5/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport axios from 'axios'\nimport { mapState } from 'vuex'\nimport liveHeader from './live-header'\n// import liveShare from './live-share'\nimport { formatTime } from '../../../utils/date.js'\n\nexport default {\n  name: 'livePusher',\n  data() {\n    return {\n      pusher: null,\n      roomID: 0,\n      roomName: '',\n      isPushingStream: false, // 是否正在推流\n      updateTimer: 0,\n      pusherTime: '00:00:00',\n      time: 0, // 直播时长 秒\n      recordTimer: null, // 记录直播时长\n      isMute: false,   //是否禁言\n      isStartCamera: true\n    }\n  },\n  computed: {\n    ...mapState({\n      user: state => state.user,\n      groupLiveInfo: state => state.groupLive.groupLiveInfo\n    }),\n    anchorAvatar() {\n      return this.user.currentUserProfile.avatar || 'https://imgcache.qq.com/open/qcloud/video/act/webim-avatar/avatar-2.png'\n    }\n  },\n  created() {\n    this.$store.commit('resetGroupLiveInfo', { roomID: 0 })\n  },\n  mounted() {\n    this.init()\n  },\n  async beforeDestroy() {\n    if (this.isPushingStream) {\n      clearInterval(this.updateTimer)\n      clearInterval(this.recordTimer)\n      await this.stopPush()\n    }\n  },\n  components: {\n    liveHeader,\n    // liveShare,\n  },\n  methods: {\n    // 初始化\n    init() {\n      this.pusher = this.TWebLive.createPusher({\n        userID: this.user.userID\n      })\n      this.setRenderView()\n      this.pusher.on(this.TWebLive.EVENT.RTC_CONNECTION_STATE_CHANGED, this.onRTCConnectionStateChanged)\n      this.pusher.on(this.TWebLive.EVENT.RTC_CLIENT_BANNED, this.onRTCClientBanned)\n      this.pusher.on(this.TWebLive.EVENT.RTC_CLIENT_ERROR, this.onRTCError)\n    },\n    // eslint-disable-next-line no-unused-vars\n    onRTCConnectionStateChanged(event) {},\n    // eslint-disable-next-line no-unused-vars\n    onRTCClientBanned(event) {},\n    // eslint-disable-next-line no-unused-vars\n    onRTCError(event) {},\n    //开启本地预览\n    setRenderView() {\n      this.pusher.setRenderView({\n        elementID: 'video-container',\n        audio: true,\n        video: true\n      }).then(() => {\n        // 设置背景\n       let el = window.document.getElementById('video-container').childNodes\n        el[0].style.backgroundColor = 'rgba(0,0,0,0)'\n        this.isStartCamera = false\n      }).catch(() => {})\n    },\n    // 摄像头、麦克风操作\n    startCamera() {\n      this.pusher.startCamera().then(() => {\n        this.isStartCamera = false\n      }).catch(() => {})\n    },\n    stopCamera() {\n      this.pusher.stopCamera().then(() => {\n        this.isStartCamera = true\n      }).catch(() => {})\n    },\n    startMicrophone() {\n      this.pusher.startMicrophone().then(() => {\n        this.isMute = false\n      }).catch(() => {})\n    },\n    stopMicrophone() {\n      this.pusher.stopMicrophone().then(() => {\n        this.isMute = true\n      }).catch(() => {})\n    },\n    // 生成roomID\n    generateRoomID(min, max) {\n      return Math.floor(Math.random()*(max - min) + min).toString()\n    },\n    // 创建直播房间\n    async createRoom() {\n      this.roomID = this.generateRoomID(1000, 2000000000)\n      this.roomName = this.roomName ? this.roomName : `${this.user.userID}的直播`\n      await axios (`https://service-62h5r0ea-1252463788.gz.apigw.tencentcs.com/release/forTestAdvanced?method=createRoom&appId=${this.user.sdkAppID}&type=groupLive&title=${this.roomName}&anchorId=${this.user.userID}&roomId=${this.roomID}`)\n      this.$store.commit('updateGroupLiveInfo', { roomID: this.roomID, roomName: this.roomName })\n      this.createGroupLiveAvChatRoom()\n    },\n    // 解散直播间\n    async destroyRoom() {\n      await axios (`https://service-c2zjvuxa-1252463788.gz.apigw.tencentcs.com/release/forTest?method=destroyRoom&appId=${this.user.sdkAppID}&type=groupLive&roomId=${this.roomID}`)\n    },\n    // 更新直播间 10s 上报一次，心跳保活，如果不上报，后台检测不到心跳会销毁房间\n    updateRoom() {\n      axios (`https://service-c2zjvuxa-1252463788.gz.apigw.tencentcs.com/release/forTest?method=updateRoom&appId=${this.user.sdkAppID}&type=groupLive&roomId=${this.roomID}`)\n    },\n    // 创建直播互动群\n    async createGroupLiveAvChatRoom() {\n      await this.tim.createGroup({\n        name: this.roomName,\n        groupID: this.roomID,\n        type: this.TIM.TYPES.GRP_AVCHATROOM,\n      })\n      this.$bus.$emit('join-group-live-avchatroom')\n    },\n    //开始推流\n    async startPushStream() {\n      await this.createRoom()\n      //streamID 拼接规则： sdkappid_roomid_userid_main\n      const streamID = `${this.user.sdkAppID}_${this.roomID}_${this.user.userID}_main`\n      // 对userSig进行encode,防止userSig中带有+时被浏览器解析为空格，导致trtc ws连接失败\n      const url = `room://livedomainname=tuikit.qcloud.com&sdkappid=${this.user.sdkAppID}&roomid=${this.roomID}&userid=${this.user.userID}&usersig=${encodeURIComponent(this.user.userSig)}&streamid=${streamID}`\n      this.pusher.startPush(url).then(() => {\n        this.isPushingStream = true\n        this.sendNoticeToGroup(1)\n        this.updateTimer = setInterval(() => {\n          this.updateRoom()\n        }, 10000)\n        this.recordTimer = setInterval(() => {\n          this.recordLiveTime()\n        }, 1000)\n      }).catch(() => {})\n    },\n    // 停止推流\n    stopPushStream() {\n      // 派发关闭浮层组件事件\n      this.$bus.$emit('close-group-live')\n    },\n    async stopPush() {\n      await this.destroyRoom()\n      await this.pusher.stopPush()\n      await this.tim.dismissGroup(this.roomID) // 解散直播群组\n      this.isPushingStream = false\n      this.sendNoticeToGroup(0)\n    },\n    // 给群内发送开始直播、结束直播自定义消息\n    // roomStatus 1 开始直播 0 结束直播\n    sendNoticeToGroup(roomStatus) {\n      if (!this.groupLiveInfo.groupID) {\n        return\n      }\n      const { userID, nick, avatar } = this.user.currentUserProfile\n      const form = {\n        roomId: this.roomID,\n        roomName: this.roomName,\n        roomCover: avatar,\n        roomStatus: `${roomStatus}`,\n        anchorName: nick,\n        version: 4,\n        roomType: 'liveRoom',\n        anchorId: userID,\n        businessID: 'group_live'\n      }\n      const message = this.tim.createCustomMessage({\n        to: this.groupLiveInfo.groupID,\n        conversationType: this.TIM.TYPES.CONV_GROUP,\n        priority: this.TIM.TYPES.MSG_PRIORITY_NORMAL,\n        payload: {\n          data: JSON.stringify(form),\n          description: '',\n          extension: '',\n        },\n      })\n      this.$store.commit('pushCurrentMessageList', message)\n      this.tim.sendMessage(message).then(() => {}).catch(() => {})\n    },\n    // 记录直播时间\n    recordLiveTime () {\n      this.time++\n      this.pusherTime = formatTime(this.time)\n    }\n  }\n}\n",null]}